var N = null;var searchIndex = {};
searchIndex["tokio"]={"doc":"A runtime for writing reliable, asynchronous, and slim applications.","items":[[0,"clock","tokio","A configurable source of time.",N,N],[5,"now","tokio::clock","Returns an `Instant` corresponding to \"now\".",N,[[],["instant"]]],[0,"codec","tokio","Utilities for encoding and decoding frames.",N,N],[8,"Decoder","tokio::codec","Decoding of frames via buffers.",N,N],[16,"Item","","The type of decoded frames.",0,N],[16,"Error","","The type of unrecoverable frame decoding errors.",0,N],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",0,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",0,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",0,[[["self"],["t"]],["framed"]]],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",N,N],[16,"Item","","The type of items consumed by the `Encoder`",1,N],[16,"Error","","The type of encoding errors.",1,N],[10,"encode","","Encodes a frame into the buffer provided.",1,N],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",N,N],[12,"io","","The inner transport used to read bytes to and write bytes to",2,N],[12,"codec","","The codec",2,N],[12,"read_buf","","The buffer with read but unprocessed data.",2,N],[12,"write_buf","","A buffer with unprocessed data which are not written yet.",2,N],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",N,N],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",N,N],[3,"BytesCodec","","A simple `Codec` implementation that just ships bytes around.",N,N],[3,"LinesCodec","","A simple `Codec` implementation that splits up data into lines.",N,N],[0,"length_delimited","","Frame a stream of bytes based on a length prefix",N,N],[3,"Builder","tokio::codec::length_delimited","Configure length delimited `LengthDelimitedCodec`s.",N,N],[3,"FrameTooBig","","An error when the number of bytes read is more than max frame length.",N,N],[3,"LengthDelimitedCodec","","A codec for frames delimited by a frame head specifying their lengths.",N,N],[11,"new","","Creates a new `LengthDelimitedCodec` with the default configuration values.",3,[[],["self"]]],[11,"max_frame_length","","Returns the current max frame setting",3,[[["self"]],["usize"]]],[11,"set_max_frame_length","","Updates the max frame setting.",3,[[["self"],["usize"]]]],[11,"new","","Creates a new length delimited codec builder with default configuration values.",4,[[],["builder"]]],[11,"big_endian","","Read the length field as a big endian integer",4,[[["self"]],["self"]]],[11,"little_endian","","Read the length field as a little endian integer",4,[[["self"]],["self"]]],[11,"native_endian","","Read the length field as a native endian integer",4,[[["self"]],["self"]]],[11,"max_frame_length","","Sets the max frame length",4,[[["self"],["usize"]],["self"]]],[11,"length_field_length","","Sets the number of bytes used to represent the length field",4,[[["self"],["usize"]],["self"]]],[11,"length_field_offset","","Sets the number of bytes in the header before the length field",4,[[["self"],["usize"]],["self"]]],[11,"length_adjustment","","Delta between the payload length specified in the header and the real payload length",4,[[["self"],["isize"]],["self"]]],[11,"num_skip","","Sets the number of bytes to skip before reading the payload",4,[[["self"],["usize"]],["self"]]],[11,"new_codec","","Create a configured length delimited `LengthDelimitedCodec`",4,[[["self"]],["lengthdelimitedcodec"]]],[11,"new_read","","Create a configured length delimited `FramedRead`",4,[[["self"],["t"]],["framedread",["lengthdelimitedcodec"]]]],[11,"new_write","","Create a configured length delimited `FramedWrite`",4,[[["self"],["t"]],["framedwrite",["lengthdelimitedcodec"]]]],[11,"new_framed","","Create a configured length delimited `Framed`",4,[[["self"],["t"]],["framed",["lengthdelimitedcodec"]]]],[0,"executor","tokio","Task execution utilities.",N,N],[8,"Executor","tokio::executor","A value that executes futures.",N,N],[10,"spawn","","Spawns a future object to run on this executor.",5,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",5,[[["self"]],["result",["spawnerror"]]]],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",N,N],[3,"SpawnError","","Errors returned by `Executor::spawn`.",N,N],[3,"Spawn","","Return value from the `spawn` function.",N,N],[5,"spawn","","Spawns a future on the default executor.",N,[[["f"]],["spawn"]]],[0,"fs","tokio","Asynchronous filesystem manipulation operations.",N,N],[5,"create_dir","tokio::fs","Creates a new, empty directory at the provided path",N,[[["p"]],["createdirfuture"]]],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they are missing.",N,[[["p"]],["createdirallfuture"]]],[0,"file","","Types for working with [`File`].",N,N],[3,"File","tokio::fs::file","A reference to an open file on the filesystem.",N,N],[3,"CreateFuture","","Future returned by `File::create` and resolves to a `File` instance.",N,N],[3,"SeekFuture","","Future returned by `File::seek`.",N,N],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",N,N],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",N,N],[3,"MetadataFuture","","Future returned by `File::metadata` and resolves to a `(File, Metadata)` instance.",N,N],[5,"hard_link","tokio::fs","Creates a new hard link on the filesystem.",N,[[["p"],["q"]],["hardlinkfuture"]]],[5,"metadata","","Queries the file system metadata for a path.",N,[[["p"]],["metadatafuture"]]],[0,"os","","OS-specific functionality.",N,N],[0,"unix","tokio::fs::os","Unix-specific extensions to primitives in the `tokio_fs` module.",N,N],[5,"symlink","tokio::fs::os::unix","Creates a new symbolic link on the filesystem.",N,[[["p"],["q"]],["symlinkfuture"]]],[3,"SymlinkFuture","","Future returned by `symlink`.",N,N],[5,"read_dir","tokio::fs","Returns a stream over the entries within a directory.",N,[[["p"]],["readdirfuture"]]],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",N,[[["p"]],["readlinkfuture"]]],[5,"remove_dir","","Removes an existing, empty directory.",N,[[["p"]],["removedirfuture"]]],[5,"remove_file","","Removes a file from the filesystem.",N,[[["p"]],["removefilefuture"]]],[5,"rename","","Rename a file or directory to a new name, replacing the original file if `to` already exists.",N,[[["p"],["q"]],["renamefuture"]]],[5,"set_permissions","","Changes the permissions found on a file or a directory.",N,[[["p"],["permissions"]],["setpermissionsfuture"]]],[5,"symlink_metadata","","Queries the file system metadata for a path.",N,[[["p"]],["symlinkmetadatafuture"]]],[3,"File","","A reference to an open file on the filesystem.",N,N],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",N,N],[0,"io","tokio","Asynchronous I/O.",N,N],[8,"AsyncRead","tokio::io","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",6,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",6,N],[11,"read_buf","","Pull some bytes from this source into the specified `BufMut`, returning how many bytes were read.",6,[[["self"],["b"]],["result",["async","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this I/O object, using `Decode` and `Encode` to read and write the raw data.",6,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",6,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",7,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",7,[[["self"]],["result",["async","error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",7,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",7,[[["self"],["b"]],["result",["async","error"]]]],[5,"stdin","","Constructs a new handle to the standard input of the current process.",N,[[],["stdin"]]],[3,"Stdin","","A handle to the standard input stream of a process.",N,N],[5,"stdout","","Constructs a new handle to the standard output of the current process.",N,[[],["stdout"]]],[3,"Stdout","","A handle to the standard output stream of a process.",N,N],[5,"stderr","","Constructs a new handle to the standard error of the current process.",N,[[],["stderr"]]],[3,"Stderr","","A handle to the standard error stream of a process.",N,N],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",N,[[["r"],["w"]],["copy"]]],[3,"Copy","","A future which will copy all data from a reader into a writer.",N,N],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",N,[[["a"]],["flush"]]],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",N,[[["a"]],["lines"]]],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",N,N],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",N,[[["r"],["t"]],["read"]]],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",N,[[["a"],["t"]],["readexact"]]],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",N,[[["a"],["vec",["u8"]]],["readtoend"]]],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",N,[[["a"],["u8"],["vec",["u8"]]],["readuntil"]]],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",N,[[["a"]],["shutdown"]]],[3,"Shutdown","","A future used to fully shutdown an I/O object.",N,N],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",N,[[["a"],["t"]],["writeall"]]],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",N,N],[4,"ErrorKind","","A list specifying general categories of I/O error.",N,N],[13,"NotFound","","An entity was not found, often a file.",8,N],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",8,N],[13,"ConnectionRefused","","The connection was refused by the remote server.",8,N],[13,"ConnectionReset","","The connection was reset by the remote server.",8,N],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",8,N],[13,"NotConnected","","The network operation failed because it was not connected yet.",8,N],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",8,N],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",8,N],[13,"BrokenPipe","","The operation failed because a pipe was closed.",8,N],[13,"AlreadyExists","","An entity already exists, often a file.",8,N],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",8,N],[13,"InvalidInput","","A parameter was incorrect.",8,N],[13,"InvalidData","","Data not valid for the operation were encountered.",8,N],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",8,N],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",8,N],[13,"Interrupted","","This operation was interrupted.",8,N],[13,"Other","","Any I/O error not part of this list.",8,N],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",8,N],[6,"Result","","A specialized `Result` type for I/O operations.",N,N],[8,"Read","","The `Read` trait allows for reading bytes from a source.",N,N],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",9,N],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",9,[[["self"]],["initializer"]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",9,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",9,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",9,N],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",9,[[["self"]],["self"]]],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",9,[[["self"]],["bytes"]]],[11,"chain","","Creates an adaptor which will chain this stream with another.",9,[[["self"],["r"]],["chain"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",9,[[["self"],["u64"]],["take"]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",N,N],[10,"write","","Write a buffer into this object, returning how many bytes were written.",10,N],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",10,[[["self"]],["result",["error"]]]],[11,"write_all","","Attempts to write an entire buffer into this write.",10,N],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",10,[[["self"],["arguments"]],["result",["error"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",10,[[["self"]],["self"]]],[0,"net","tokio","TCP/UDP/Unix bindings for `tokio`.",N,N],[3,"TcpListener","tokio::net","An I/O object representing a TCP socket listening for incoming connections.",N,N],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",N,N],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"UdpSocket","","An I/O object representing a UDP socket.",N,N],[3,"UnixDatagram","","An I/O object representing a Unix datagram socket.",N,N],[3,"UnixDatagramFramed","","A unified `Stream` and `Sink` interface to an underlying `UnixDatagram`, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"UnixListener","","A Unix socket which can accept connections from other Unix sockets.",N,N],[3,"UnixStream","","A structure representing a connected Unix socket.",N,N],[0,"tcp","","TCP bindings for `tokio`.",N,N],[3,"ConnectFuture","tokio::net::tcp","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",N,N],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",N,N],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",N,N],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",N,N],[0,"udp","tokio::net","UDP bindings for `tokio`.",N,N],[3,"RecvDgram","tokio::net::udp","A future used to receive a datagram from a UDP socket.",N,N],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",N,N],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"UdpSocket","","An I/O object representing a UDP socket.",N,N],[0,"unix","tokio::net","Unix domain socket bindings for `tokio` (only available on unix systems).",N,N],[3,"ConnectFuture","tokio::net::unix","Future returned by `UnixStream::connect` which will resolve to a `UnixStream` when the stream is connected.",N,N],[3,"Incoming","","Stream of listeners",N,N],[3,"RecvDgram","","A future for receiving datagrams from a Unix datagram socket.",N,N],[3,"SendDgram","","A future for writing a buffer to a Unix datagram socket.",N,N],[3,"UCred","","Credentials of a process",N,N],[12,"uid","","UID (user ID) of the process",11,N],[12,"gid","","GID (group ID) of the process",11,N],[3,"UnixDatagram","","An I/O object representing a Unix datagram socket.",N,N],[3,"UnixDatagramFramed","","A unified `Stream` and `Sink` interface to an underlying `UnixDatagram`, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"UnixListener","","A Unix socket which can accept connections from other Unix sockets.",N,N],[3,"UnixStream","","A structure representing a connected Unix socket.",N,N],[0,"prelude","tokio","A \"prelude\" for users of the `tokio` crate.",N,N],[8,"AsyncRead","tokio::prelude","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",6,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",6,N],[11,"read_buf","","Pull some bytes from this source into the specified `BufMut`, returning how many bytes were read.",6,[[["self"],["b"]],["result",["async","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this I/O object, using `Decode` and `Encode` to read and write the raw data.",6,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",6,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",7,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",7,[[["self"]],["result",["async","error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",7,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",7,[[["self"],["b"]],["result",["async","error"]]]],[8,"Read","","The `Read` trait allows for reading bytes from a source.",N,N],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",9,N],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",9,[[["self"]],["initializer"]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",9,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",9,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",9,N],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",9,[[["self"]],["self"]]],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",9,[[["self"]],["bytes"]]],[11,"chain","","Creates an adaptor which will chain this stream with another.",9,[[["self"],["r"]],["chain"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",9,[[["self"],["u64"]],["take"]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",N,N],[10,"write","","Write a buffer into this object, returning how many bytes were written.",10,N],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",10,[[["self"]],["result",["error"]]]],[11,"write_all","","Attempts to write an entire buffer into this write.",10,N],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",10,[[["self"],["arguments"]],["result",["error"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",10,[[["self"]],["self"]]],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",12,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",12,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",12,[[["self"]],["result",["async"]]]],[11,"wait","","Block the current thread until this future is resolved.",12,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",12,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",12,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",12,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",12,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",12,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",12,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",12,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",12,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",12,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",12,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",12,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",12,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",12,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",12,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",12,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",12,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",12,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",12,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",12,[[["self"]],["shared"]]],[0,"future","","Futures",N,N],[8,"Future","tokio::prelude::future","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",12,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",12,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",12,[[["self"]],["result",["async"]]]],[11,"wait","","Block the current thread until this future is resolved.",12,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",12,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",12,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",12,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",12,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",12,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",12,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",12,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",12,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",12,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",12,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",12,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",12,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",12,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",12,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",12,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",12,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",12,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",12,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",12,[[["self"]],["shared"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",13,N],[16,"Item","","The item that the future may resolve with.",13,N],[16,"Error","","The error that the future may resolve with.",13,N],[10,"into_future","","Consumes this object and produces a future.",13,N],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",N,N],[16,"Future","","The future for the conversion.",14,N],[16,"Error","","Possible errors during conversion.",14,N],[10,"future_from","","Consume the given value, beginning the conversion.",14,N],[8,"Executor","","A trait for types which can spawn fresh futures.",N,N],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",15,[[["self"],["f"]],["result",["executeerror"]]]],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",N,N],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",N,N],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",16,N],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",16,N],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Err","","A future representing a value that is immediately ready.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"LoopFn","","A future implementing a tail-recursive loop.",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",N,[[["i"]],["joinall"]]],[3,"PollFn","","A future which adapts a function returning `Poll`.",N,N],[4,"Loop","","The status of a `loop_fn` loop.",N,N],[13,"Break","","Indicates that the loop has completed with output `T`.",17,N],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",17,N],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",N,[[["s"],["f"]],["loopfn"]]],[5,"select_all","","Creates a new future which will select over a list of futures.",N,[[["i"]],["selectall"]]],[3,"Empty","","A future which is never resolved.",N,N],[5,"failed","","Creates a \"leaf future\" from an immediate value of a failed computation.",N,[[["e"]],["futureresult"]]],[3,"Collect","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",N,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[5,"done","","Creates a new \"leaf future\" which will resolve with the given result.",N,[[["result"]],["futureresult"]]],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",N,N],[13,"A","","First branch of the type",18,N],[13,"B","","Second branch of the type",18,N],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",N,[[["t"]],["futureresult"]]],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",N,N],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",N,N],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",N,[[["i"]],["selectok"]]],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",N,N],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",N,N],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",N,N],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",N,N],[8,"Stream","tokio::prelude","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",19,N],[16,"Error","","The type of error this stream may generate.",19,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",19,[[["self"]],["result",["async"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",19,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",19,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",19,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",19,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",19,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",19,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",19,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",19,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",19,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",19,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",19,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",19,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",19,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",19,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",19,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",19,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",19,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",19,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",19,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",19,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",19,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",19,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",19,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",19,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",19,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",19,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",19,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",19,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",19,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",19,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",19,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",19,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",19,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",19,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",19,[[["self"],["f"]],["inspecterr"]]],[0,"stream","","Asynchronous streams",N,N],[0,"futures_unordered","tokio::prelude::stream","An unbounded set of futures.",N,N],[3,"FuturesUnordered","tokio::prelude::stream::futures_unordered","An unbounded set of futures.",N,N],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",N,N],[8,"Stream","tokio::prelude::stream","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",19,N],[16,"Error","","The type of error this stream may generate.",19,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",19,[[["self"]],["result",["async"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",19,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",19,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",19,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",19,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",19,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",19,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",19,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",19,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",19,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",19,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",19,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",19,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",19,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",19,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",19,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",19,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",19,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",19,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",19,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",19,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",19,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",19,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",19,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",19,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",19,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",19,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",19,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",19,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",19,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",19,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",19,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",19,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",19,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",19,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",19,[[["self"],["f"]],["inspecterr"]]],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresunordered"]]],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iterok"]]],[3,"Iter","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iter"]]],[3,"InspectErr","","Do something with the error of a stream, passing it on.",N,N],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Sender","","The transmission end of a channel which is used to send values.",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"FromErr","","A stream combinator to change the error type of a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",20,N],[12,"1","","",20,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"Merge","","An adapter for merging the output of two streams.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[5,"once","","Creates a stream of single element",N,[[["result"]],["once"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iterresult"]]],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of the channel is dropped",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",N,N],[13,"First","","An item from the first stream",21,N],[13,"Second","","An item from the second stream",21,N],[13,"Both","","Items from both streams",21,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"FutureSender","","Future returned by `Sender::send`.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[8,"Sink","tokio::prelude","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",22,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",22,N],[10,"start_send","","Begin the process of sending a value to the sink.",22,N],[10,"poll_complete","","Flush all output from this sink, if necessary.",22,[[["self"]],["result",["async"]]]],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",22,[[["self"]],["result",["async"]]]],[11,"wait","","Creates a new object which will produce a synchronous sink.",22,[[["self"]],["wait"]]],[11,"with","","Composes a function in front of the sink.",22,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",22,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",22,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",22,[[["self"]],["sinkfromerr"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",22,[[["self"],["usize"]],["buffer"]]],[11,"fanout","","Fanout items to multiple sinks.",22,[[["self"],["s"]],["fanout"]]],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",22,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",22,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",22,[[["self"],["s"]],["sendall"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",13,N],[16,"Item","","The item that the future may resolve with.",13,N],[16,"Error","","The error that the future may resolve with.",13,N],[10,"into_future","","Consumes this object and produces a future.",13,N],[4,"Async","","Return type of future, indicating whether a value is ready or not.",N,N],[13,"Ready","","Represents that a value is immediately ready.",23,N],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",23,N],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",N,N],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",24,N],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",24,N],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",N,N],[0,"task","","Tasks used to drive a future computation",N,N],[5,"spawn","tokio::prelude::task","Spawns a future or stream, returning it and the new task responsible for running it to completion.",N,[[["t"]],["spawn"]]],[8,"Executor","","A trait representing requests to poll futures.",N,N],[10,"execute","","Requests that `Run` is executed soon on the given executor.",25,N],[3,"AtomicTask","","A synchronization primitive for task notification.",N,N],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",N,N],[10,"insert","","Insert the given ID into the set",26,N],[3,"Run","","Units of work submitted to an `Executor`, currently only created internally.",N,N],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",N,N],[3,"Task","","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",N,N],[3,"TaskRc","","A reference to a piece of data that's accessible only within a specific `Task`.",N,N],[3,"Spawn","","Representation of a spawned future/stream.",N,N],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",N,[[],["task"]]],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",N,[[["unparkevent"],["f"]],["r"]]],[5,"init","","Initialize the `futures` task system.",N,N],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",N,N],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",27,N],[8,"FutureExt","tokio::prelude","An extension trait for `Future` that provides a variety of convenient combinator functions.",N,N],[11,"timeout","","Creates a new future which allows `self` until `timeout`.",28,[[["self"],["duration"]],["timeout"]]],[8,"StreamExt","","An extension trait for `Stream` that provides a variety of convenient combinator functions.",N,N],[11,"throttle","","Throttle down the stream by enforcing a fixed delay between items.",29,[[["self"],["duration"]],["throttle"]]],[11,"timeout","","Creates a new stream which allows `self` until `timeout`.",29,[[["self"],["duration"]],["timeout"]]],[0,"reactor","tokio","Event loop that drives Tokio I/O resources.",N,N],[3,"Reactor","tokio::reactor","The core reactor, or event loop.",N,N],[3,"Handle","","A reference to a reactor.",N,N],[3,"Background","","Handle to the reactor running on a background thread.",N,N],[3,"Turn","","Return value from the `turn` method on `Reactor`.",N,N],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",N,N],[3,"PollEvented2","","Associates an I/O resource that implements the [`std::io::Read`] and/or [`std::io::Write`] traits with the reactor that drives it.",N,N],[0,"runtime","tokio","A batteries included runtime for applications using Tokio.",N,N],[3,"Builder","tokio::runtime","Builds Tokio Runtime with custom configuration values.",N,N],[3,"Shutdown","","A future that resolves when the Tokio `Runtime` is shut down.",N,N],[3,"TaskExecutor","","Executes futures on the runtime",N,N],[3,"Runtime","","Handle to the Tokio runtime.",N,N],[5,"run","","Start the Tokio runtime using the supplied future to bootstrap execution.",N,[[["f"]]]],[11,"new","","Returns a new runtime builder initialized with default configuration values.",30,[[],["builder"]]],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",30,[[["self"],["clock"]],["self"]]],[11,"core_threads","","Set the maximum number of worker threads for the `Runtime`'s thread pool.",30,[[["self"],["usize"]],["self"]]],[11,"blocking_threads","","Set the maximum number of concurrent blocking sections in the `Runtime`'s thread pool.",30,[[["self"],["usize"]],["self"]]],[11,"keep_alive","","Set the worker thread keep alive duration for threads in the `Runtime`'s thread pool.",30,[[["self"],["option",["duration"]]],["self"]]],[11,"name_prefix","","Set name prefix of threads spawned by the `Runtime`'s thread pool.",30,[[["self"],["s"]],["self"]]],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",30,[[["self"],["usize"]],["self"]]],[11,"after_start","","Execute function `f` after each thread is started but before it starts doing work.",30,[[["self"],["f"]],["self"]]],[11,"before_stop","","Execute function `f` before each thread stops.",30,[[["self"],["f"]],["self"]]],[11,"build","","Create the configured `Runtime`.",30,[[["self"]],["result",["runtime"]]]],[0,"current_thread","","A runtime implementation that runs everything on the current thread.",N,N],[5,"spawn","tokio::runtime::current_thread","Executes a future on the current thread.",N,N],[3,"TaskExecutor","","Executes futures on the current thread.",N,N],[3,"Builder","","Builds a Single-threaded runtime with custom configuration values.",N,N],[3,"Runtime","","Single-threaded runtime provides a way to start reactor and executor on the current thread.",N,N],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` runtime instance",N,N],[5,"block_on_all","","Run the provided future to completion using a runtime running on the current thread.",N,[[["f"]],["result"]]],[11,"new","","Returns a new runtime builder initialized with default configuration values.",31,[[],["builder"]]],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",31,[[["self"],["clock"]],["self"]]],[11,"build","","Create the configured `Runtime`.",31,[[["self"]],["result",["runtime"]]]],[11,"spawn","","Spawn a future onto the `CurrentThread` runtime instance corresponding to this handle",32,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",32,[[["self"]],["result",["spawnerror"]]]],[11,"new","","Returns a new runtime initialized with default configuration values.",33,[[],["result",["runtime"]]]],[11,"handle","","Get a new handle to spawn futures on the single-threaded Tokio runtime",33,[[["self"]],["handle"]]],[11,"spawn","","Spawn a future onto the single-threaded Tokio runtime.",33,[[["self"],["f"]],["self"]]],[11,"block_on","","Runs the provided future, blocking the current thread until the future completes.",33,[[["self"],["f"]],["result"]]],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",33,[[["self"]],["result",["runerror"]]]],[11,"spawn","tokio::runtime","Spawn a future onto the Tokio runtime.",34,[[["self"],["f"]]]],[11,"new","","Create a new runtime instance with default configuration values.",35,[[],["result"]]],[11,"reactor","","Return a reference to the reactor handle for this runtime instance.",35,[[["self"]],["handle"]]],[11,"executor","","Return a handle to the runtime's executor.",35,[[["self"]],["taskexecutor"]]],[11,"spawn","","Spawn a future onto the Tokio runtime.",35,[[["self"],["f"]],["self"]]],[11,"block_on","","Run a future to completion on the Tokio runtime.",35,[[["self"],["f"]],["result"]]],[11,"block_on_all","","Run a future to completion on the Tokio runtime, then wait for all background futures to complete too.",35,[[["self"],["f"]],["result"]]],[11,"shutdown_on_idle","","Signals the runtime to shutdown once it becomes idle.",35,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Signals the runtime to shutdown immediately.",35,[[["self"]],["shutdown"]]],[0,"timer","tokio","Utilities for tracking time.",N,N],[0,"delay_queue","tokio::timer","A queue of delayed elements.",N,N],[3,"DelayQueue","tokio::timer::delay_queue","A queue of delayed elements.",N,N],[3,"Expired","","An entry in `DelayQueue` that has expired and removed.",N,N],[3,"Key","","Token to a value stored in a `DelayQueue`.",N,N],[3,"DelayQueue","tokio::timer","A queue of delayed elements.",N,N],[3,"Error","","Errors encountered by the timer implementation.",N,N],[3,"Interval","","A stream representing notifications at fixed interval",N,N],[3,"Delay","","A future that completes at a specified instant in time.",N,N],[3,"Timeout","","Allows a `Future` or `Stream` to execute for a limited amount of time.",N,N],[0,"timeout","","Allows a future or stream to execute for a maximum amount of time.",N,N],[3,"Timeout","tokio::timer::timeout","Allows a `Future` or `Stream` to execute for a limited amount of time.",N,N],[3,"Error","","Error returned by `Timeout`.",N,N],[0,"util","tokio","Utilities for working with Tokio.",N,N],[11,"timeout","tokio::prelude","Creates a new future which allows `self` until `timeout`.",28,[[["self"],["duration"]],["timeout"]]],[11,"throttle","","Throttle down the stream by enforcing a fixed delay between items.",29,[[["self"],["duration"]],["throttle"]]],[11,"timeout","","Creates a new stream which allows `self` until `timeout`.",29,[[["self"],["duration"]],["timeout"]]],[8,"FutureExt","tokio::util","An extension trait for `Future` that provides a variety of convenient combinator functions.",N,N],[11,"timeout","tokio::prelude","Creates a new future which allows `self` until `timeout`.",28,[[["self"],["duration"]],["timeout"]]],[8,"StreamExt","tokio::util","An extension trait for `Stream` that provides a variety of convenient combinator functions.",N,N],[11,"throttle","tokio::prelude","Throttle down the stream by enforcing a fixed delay between items.",29,[[["self"],["duration"]],["throttle"]]],[11,"timeout","","Creates a new stream which allows `self` until `timeout`.",29,[[["self"],["duration"]],["timeout"]]],[11,"from","tokio::codec","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","tokio::codec::length_delimited","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_string","","",41,[[["self"]],["string"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","tokio::executor","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_string","","",43,[[["self"]],["string"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"into_future","","",44,[[["self"]],["f"]]],[11,"from","tokio::runtime::current_thread","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"from","tokio::fs","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","tokio::fs::file","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"into_future","","",47,[[["self"]],["f"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"into_future","","",48,[[["self"]],["f"]]],[11,"from","tokio::fs","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"from","tokio::fs::file","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"into_future","","",50,[[["self"]],["f"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"into_future","","",51,[[["self"]],["f"]]],[11,"from","tokio::fs::os::unix","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"into_future","","",52,[[["self"]],["f"]]],[11,"from","tokio::io","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"into_future","","",56,[[["self"]],["f"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"into_future","","",57,[[["self"]],["f"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"into_future","","",59,[[["self"]],["f"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"into_future","","",60,[[["self"]],["f"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"into_future","","",61,[[["self"]],["f"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"into_future","","",63,[[["self"]],["f"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"into_future","","",64,[[["self"]],["f"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_string","","",66,[[["self"]],["string"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","tokio::net::tcp","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"from","tokio::net::udp","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"from","tokio::net::unix","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"from","tokio::net::tcp","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"into_future","","",75,[[["self"]],["f"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"from","tokio::net::udp","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"into_future","","",77,[[["self"]],["f"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"into_future","","",78,[[["self"]],["f"]]],[11,"from","tokio::net::unix","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"into_future","","",79,[[["self"]],["f"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"into_future","","",81,[[["self"]],["f"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"into_future","","",82,[[["self"]],["f"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","tokio::prelude::future","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"into_future","","",84,[[["self"]],["f"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"into_future","","",85,[[["self"]],["f"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"into_future","","",86,[[["self"]],["f"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"into_future","","",87,[[["self"]],["f"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"into_future","","",88,[[["self"]],["f"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"into_future","","",89,[[["self"]],["f"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"into_future","","",90,[[["self"]],["f"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"into_future","","",91,[[["self"]],["f"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"into_future","","",92,[[["self"]],["f"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"into_future","","",93,[[["self"]],["f"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"into_future","","",95,[[["self"]],["f"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"into_future","","",96,[[["self"]],["f"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"into_future","","",97,[[["self"]],["f"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"into_future","","",98,[[["self"]],["f"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"into_future","","",99,[[["self"]],["f"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"into_future","","",100,[[["self"]],["f"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"into_future","","",101,[[["self"]],["f"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"into_future","","",102,[[["self"]],["f"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"into_future","","",18,[[["self"]],["f"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_string","","",103,[[["self"]],["string"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"into_future","","",105,[[["self"]],["f"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"into_future","","",106,[[["self"]],["f"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"into_future","","",107,[[["self"]],["f"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"into_future","","",108,[[["self"]],["f"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"into_future","","",109,[[["self"]],["f"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"into_future","","",110,[[["self"]],["f"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"into_future","","",111,[[["self"]],["f"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"into_future","","",112,[[["self"]],["f"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"from","tokio::prelude::stream::futures_unordered","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"into_iter","","",115,[[["self"]],["i"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"from","tokio::prelude::stream","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"into_future","","",127,[[["self"]],["f"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"into_future","","",130,[[["self"]],["f"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"into_future","","",133,[[["self"]],["f"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"into_future","","",135,[[["self"]],["f"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"into_iter","","",144,[[["self"]],["i"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"into_future","","",148,[[["self"]],["f"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"into_future","","",149,[[["self"]],["f"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"into_future","","",153,[[["self"]],["f"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"to_string","","",155,[[["self"]],["string"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",161,[[["t"]],["t"]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"from","","",162,[[["t"]],["t"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"into_future","","",162,[[["self"]],["f"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"from","tokio::prelude","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","tokio::prelude::task","",164,[[["t"]],["t"]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"from","","",165,[[["t"]],["t"]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,N],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,N],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,N],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"into","","",169,[[["self"]],["u"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"into","","",170,[[["self"]],["u"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"from","tokio::reactor","",171,[[["t"]],["t"]]],[11,"into","","",171,[[["self"]],["u"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"from","","",172,[[["t"]],["t"]]],[11,"into","","",172,[[["self"]],["u"]]],[11,"to_owned","","",172,[[["self"]],["t"]]],[11,"clone_into","","",172,N],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"from","","",173,[[["t"]],["t"]]],[11,"into","","",173,[[["self"]],["u"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"into","","",175,[[["self"]],["u"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"into","","",176,[[["self"]],["u"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"from","tokio::runtime","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"into","","",177,[[["self"]],["u"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"into_future","","",177,[[["self"]],["f"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","tokio::runtime::current_thread","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","tokio::timer","",178,[[["t"]],["t"]]],[11,"into","","",178,[[["self"]],["u"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"from","tokio::timer::delay_queue","",179,[[["t"]],["t"]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,N],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"from","tokio::timer","",181,[[["t"]],["t"]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"to_string","","",181,[[["self"]],["string"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"into_future","","",183,[[["self"]],["f"]]],[11,"from","tokio::timer::timeout","",184,[[["t"]],["t"]]],[11,"into","","",184,[[["self"]],["u"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"into_future","","",184,[[["self"]],["f"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"to_string","","",185,[[["self"]],["string"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"eq","tokio::io","",8,[[["self"],["errorkind"]],["bool"]]],[11,"from","","",66,[[["intoinnererror"]],["error"]]],[11,"from","","Converts a [`NulError`] into a [`io::Error`].",66,[[["nulerror"]],["error"]]],[11,"from","","Converts an [`ErrorKind`] into an [`Error`].",66,[[["errorkind"]],["error"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",8,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"hash","","",8,N],[11,"fmt","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",66,[[["self"]],["str"]]],[11,"cause","","",66,[[["self"]],["option",["error"]]]],[11,"cmp","","",8,[[["self"],["errorkind"]],["ordering"]]],[11,"clone","","",8,[[["self"]],["errorkind"]]],[11,"fmt","tokio::prelude::stream","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",169,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream::futures_unordered","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream::futures_unordered","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::task","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","tokio::prelude::stream::futures_unordered","",114,N],[11,"drop","tokio::prelude::future","",96,N],[11,"poll","","",106,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",135,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",86,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",148,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",100,[[["self"]],["result",["async"]]]],[11,"poll","","",88,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",153,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",98,[[["self"]],["result",["async"]]]],[11,"poll","","",93,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",162,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",97,[[["self"]],["result",["async"]]]],[11,"poll","","",112,[[["self"]],["result",["async"]]]],[11,"poll","","",105,[[["self"]],["result",["async"]]]],[11,"poll","","",99,[[["self"]],["result",["async"]]]],[11,"poll","","",107,[[["self"]],["result",["async"]]]],[11,"poll","","",102,[[["self"]],["result",["async"]]]],[11,"poll","","",18,[[["self"]],["result",["async"]]]],[11,"poll","","",84,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",127,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",109,[[["self"]],["result",["async"]]]],[11,"poll","","",108,[[["self"]],["result",["async"]]]],[11,"poll","","",87,[[["self"]],["result",["async"]]]],[11,"poll","","",101,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",149,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",90,[[["self"]],["result",["async"]]]],[11,"poll","","",110,[[["self"]],["result",["async"]]]],[11,"poll","","",96,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",130,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",111,[[["self"]],["result",["async"]]]],[11,"poll","","",89,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",133,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",91,[[["self"]],["result",["async"]]]],[11,"poll","","",85,[[["self"]],["result",["async"]]]],[11,"poll","","",92,[[["self"]],["result",["async"]]]],[11,"poll","","",95,[[["self"]],["result",["async"]]]],[11,"default","tokio::prelude::task","",164,[[],["atomictask"]]],[11,"start_send","tokio::prelude::stream","",137,N],[11,"poll_complete","","",137,[[["self"]],["result",["async"]]]],[11,"close","","",137,[[["self"]],["result",["async"]]]],[11,"start_send","","",140,N],[11,"poll_complete","","",140,[[["self"]],["result",["async"]]]],[11,"close","","",140,[[["self"]],["result",["async"]]]],[11,"start_send","","",131,N],[11,"poll_complete","","",131,[[["self"]],["result",["async"]]]],[11,"close","","",131,[[["self"]],["result",["async"]]]],[11,"start_send","","",146,N],[11,"poll_complete","","",146,[[["self"]],["result",["async"]]]],[11,"close","","",146,[[["self"]],["result",["async"]]]],[11,"start_send","","",163,N],[11,"poll_complete","","",163,[[["self"]],["result",["async"]]]],[11,"close","","",163,[[["self"]],["result",["async"]]]],[11,"start_send","","",142,N],[11,"poll_complete","","",142,[[["self"]],["result",["async"]]]],[11,"close","","",142,[[["self"]],["result",["async"]]]],[11,"start_send","","",147,N],[11,"poll_complete","","",147,[[["self"]],["result",["async"]]]],[11,"close","","",147,[[["self"]],["result",["async"]]]],[11,"start_send","","",121,N],[11,"poll_complete","","",121,[[["self"]],["result",["async"]]]],[11,"close","","",121,[[["self"]],["result",["async"]]]],[11,"start_send","","",125,N],[11,"poll_complete","","",125,[[["self"]],["result",["async"]]]],[11,"close","","",125,[[["self"]],["result",["async"]]]],[11,"start_send","","",136,N],[11,"poll_complete","","",136,[[["self"]],["result",["async"]]]],[11,"close","","",136,[[["self"]],["result",["async"]]]],[11,"start_send","","",139,N],[11,"poll_complete","","",139,[[["self"]],["result",["async"]]]],[11,"close","","",139,[[["self"]],["result",["async"]]]],[11,"start_send","","",132,N],[11,"poll_complete","","",132,[[["self"]],["result",["async"]]]],[11,"close","","",132,[[["self"]],["result",["async"]]]],[11,"start_send","","",156,N],[11,"poll_complete","","",156,[[["self"]],["result",["async"]]]],[11,"close","","",156,[[["self"]],["result",["async"]]]],[11,"start_send","","",117,N],[11,"poll_complete","","",117,[[["self"]],["result",["async"]]]],[11,"close","","",117,[[["self"]],["result",["async"]]]],[11,"start_send","","",159,N],[11,"poll_complete","","",159,[[["self"]],["result",["async"]]]],[11,"close","","",159,[[["self"]],["result",["async"]]]],[11,"start_send","","",129,N],[11,"poll_complete","","",129,[[["self"]],["result",["async"]]]],[11,"close","","",129,[[["self"]],["result",["async"]]]],[11,"start_send","","",116,N],[11,"poll_complete","","",116,[[["self"]],["result",["async"]]]],[11,"close","","",116,[[["self"]],["result",["async"]]]],[11,"start_send","","",122,N],[11,"poll_complete","","",122,[[["self"]],["result",["async"]]]],[11,"close","","",122,[[["self"]],["result",["async"]]]],[11,"start_send","","",157,N],[11,"poll_complete","","",157,[[["self"]],["result",["async"]]]],[11,"close","","",157,[[["self"]],["result",["async"]]]],[11,"start_send","","",143,N],[11,"poll_complete","","",143,[[["self"]],["result",["async"]]]],[11,"close","","",143,[[["self"]],["result",["async"]]]],[11,"start_send","","",145,N],[11,"poll_complete","","",145,[[["self"]],["result",["async"]]]],[11,"close","","",145,[[["self"]],["result",["async"]]]],[11,"description","tokio::prelude::future","",103,[[["self"]],["str"]]],[11,"cause","","",103,[[["self"]],["option",["error"]]]],[11,"description","tokio::prelude::stream","",20,[[["self"]],["str"]]],[11,"description","","",155,[[["self"]],["str"]]],[11,"poll","","",137,[[["self"]],["result",["async"]]]],[11,"poll","","",147,[[["self"]],["result",["async"]]]],[11,"poll","","",122,[[["self"]],["result",["async"]]]],[11,"poll","","",160,[[["self"]],["result",["async"]]]],[11,"poll","","",150,[[["self"]],["result",["async"]]]],[11,"poll","","",161,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",104,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",116,[[["self"]],["result",["async"]]]],[11,"poll","","",142,[[["self"]],["result",["async"]]]],[11,"poll","","",143,[[["self"]],["result",["async"]]]],[11,"poll","","",140,[[["self"]],["result",["async"]]]],[11,"poll","","",156,[[["self"]],["result",["async"]]]],[11,"poll","","",132,[[["self"]],["result",["async"]]]],[11,"poll","","",131,[[["self"]],["result",["async"]]]],[11,"poll","","",157,[[["self"]],["result",["async"]]]],[11,"poll","","",151,[[["self"]],["result",["async"]]]],[11,"poll","","",154,[[["self"]],["result",["async"]]]],[11,"poll","","",126,[[["self"]],["result",["async"]]]],[11,"poll","","",121,[[["self"]],["result",["async"]]]],[11,"poll","","",145,[[["self"]],["result",["async"]]]],[11,"poll","","",119,[[["self"]],["result",["async"]]]],[11,"poll","","",152,[[["self"]],["result",["async"]]]],[11,"poll","","",120,[[["self"]],["result",["async"]]]],[11,"poll","","",129,[[["self"]],["result",["async"]]]],[11,"poll","","",117,[[["self"]],["result",["async"]]]],[11,"poll","","",136,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream::futures_unordered","",114,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",146,[[["self"]],["result",["async"]]]],[11,"poll","","",124,[[["self"]],["result",["async"]]]],[11,"poll","","",141,[[["self"]],["result",["async"]]]],[11,"poll","","",118,[[["self"]],["result",["async"]]]],[11,"poll","","",158,[[["self"]],["result",["async"]]]],[11,"poll","","",163,[[["self"]],["result",["async"]]]],[11,"poll","","",159,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::future","",113,[[["self"]],["result",["async"]]]],[11,"poll","tokio::prelude::stream","",125,[[["self"]],["result",["async"]]]],[11,"poll","","",128,[[["self"]],["result",["async"]]]],[11,"poll","","",123,[[["self"]],["result",["async"]]]],[11,"poll","","",134,[[["self"]],["result",["async"]]]],[11,"clone","tokio::prelude::future","",94,[[["self"]],["shareditem"]]],[11,"clone","tokio::prelude","",23,[[["self"]],["async"]]],[11,"clone","tokio::prelude::future","",96,[[["self"]],["shared"]]],[11,"clone","","",103,[[["self"]],["sharederror"]]],[11,"clone","tokio::prelude::task","",166,[[["self"]],["unparkevent"]]],[11,"clone","","",168,[[["self"]],["taskrc"]]],[11,"clone","tokio::prelude::future","",86,[[["self"]],["futureresult"]]],[11,"clone","tokio::prelude","",24,[[["self"]],["asyncsink"]]],[11,"clone","tokio::prelude::task","",167,[[["self"]],["task"]]],[11,"clone","tokio::prelude::future","",16,[[["self"]],["executeerrorkind"]]],[11,"eq","tokio::prelude","",24,[[["self"],["asyncsink"]],["bool"]]],[11,"ne","","",24,[[["self"],["asyncsink"]],["bool"]]],[11,"eq","tokio::prelude::future","",16,[[["self"],["executeerrorkind"]],["bool"]]],[11,"eq","tokio::prelude","",23,[[["self"],["async"]],["bool"]]],[11,"ne","","",23,[[["self"],["async"]],["bool"]]],[11,"from","tokio::prelude::future","",86,[[["result"]],["futureresult"]]],[11,"from","tokio::prelude","",23,[[["t"]],["async"]]],[11,"next","tokio::prelude::stream","",144,[[["self"]],["option"]]],[11,"next","tokio::prelude::stream::futures_unordered","",115,[[["self"]],["option"]]],[11,"size_hint","","",115,N],[11,"fmt","tokio::prelude::stream","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::future","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::prelude::stream","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_iter","tokio::prelude::stream::futures_unordered","",114,[[["t"]],["futuresunordered"]]],[11,"from_iter","tokio::prelude::stream","",118,[[["t"]],["futuresordered"]]],[11,"deref","tokio::prelude::future","",94,[[["self"]],["t"]]],[11,"deref","","",103,[[["self"]],["e"]]],[11,"clone","tokio::runtime::current_thread","",45,[[["self"]],["taskexecutor"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"spawn","","",45,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"execute","","",45,[[["self"],["f"]],["result",["executeerror"]]]],[11,"clone","tokio::executor","",42,[[["self"]],["defaultexecutor"]]],[11,"spawn","","",42,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","",42,[[["self"]],["result",["spawnerror"]]]],[11,"description","","",43,[[["self"]],["str"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"execute","","",42,[[["self"],["t"]],["result",["executeerror"]]]],[11,"write","tokio::io","",65,N],[11,"flush","","",65,[[["self"]],["result",["error"]]]],[11,"shutdown","","",65,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",65,[[["self"],["b"]],["result",["async","error"]]]],[11,"read_buf","","",62,[[["self"],["b"]],["result",["async","error"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::codec","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::io","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::codec","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::io","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"read","","",62,N],[11,"poll","tokio::codec","",37,[[["self"]],["result",["async"]]]],[11,"poll","","",36,[[["self"]],["result",["async"]]]],[11,"poll","","",38,[[["self"]],["result",["async"]]]],[11,"poll","tokio::io","",58,[[["self"]],["result",["async","error"]]]],[11,"poll","","",59,[[["self"]],["result",["async","error"]]]],[11,"poll","","",57,[[["self"]],["result",["async","error"]]]],[11,"poll","","",63,[[["self"]],["result",["async","error"]]]],[11,"poll","","",61,[[["self"]],["result",["async","error"]]]],[11,"poll","","",60,[[["self"]],["result",["async","error"]]]],[11,"poll","","",64,[[["self"]],["result",["async","error"]]]],[11,"poll","","",56,[[["self"]],["result",["async","error"]]]],[11,"start_send","tokio::codec","",36,N],[11,"poll_complete","","",36,[[["self"]],["result",["async"]]]],[11,"close","","",36,[[["self"]],["result",["async"]]]],[11,"start_send","","",38,N],[11,"poll_complete","","",38,[[["self"]],["result",["async"]]]],[11,"close","","",38,[[["self"]],["result",["async"]]]],[11,"start_send","","",37,N],[11,"poll_complete","","",37,[[["self"]],["result",["async"]]]],[11,"close","","",37,[[["self"]],["result",["async"]]]],[11,"clone","","",39,[[["self"]],["bytescodec"]]],[11,"clone","","",40,[[["self"]],["linescodec"]]],[11,"decode","","",39,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode","","",40,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode_eof","","",40,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"partial_cmp","","",39,[[["self"],["bytescodec"]],["option",["ordering"]]]],[11,"lt","","",39,[[["self"],["bytescodec"]],["bool"]]],[11,"le","","",39,[[["self"],["bytescodec"]],["bool"]]],[11,"gt","","",39,[[["self"],["bytescodec"]],["bool"]]],[11,"ge","","",39,[[["self"],["bytescodec"]],["bool"]]],[11,"partial_cmp","","",40,[[["self"],["linescodec"]],["option",["ordering"]]]],[11,"lt","","",40,[[["self"],["linescodec"]],["bool"]]],[11,"le","","",40,[[["self"],["linescodec"]],["bool"]]],[11,"gt","","",40,[[["self"],["linescodec"]],["bool"]]],[11,"ge","","",40,[[["self"],["linescodec"]],["bool"]]],[11,"cmp","","",40,[[["self"],["linescodec"]],["ordering"]]],[11,"cmp","","",39,[[["self"],["bytescodec"]],["ordering"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",39,N],[11,"hash","","",40,N],[11,"encode","","",40,[[["self"],["string"],["bytesmut"]],["result",["error"]]]],[11,"encode","","",39,[[["self"],["bytes"],["bytesmut"]],["result",["error"]]]],[11,"eq","","",40,[[["self"],["linescodec"]],["bool"]]],[11,"ne","","",40,[[["self"],["linescodec"]],["bool"]]],[11,"eq","","",39,[[["self"],["bytescodec"]],["bool"]]],[11,"ne","","",39,[[["self"],["bytescodec"]],["bool"]]],[11,"clone","tokio::fs","",49,[[["self"]],["openoptions"]]],[11,"write","","",46,N],[11,"flush","","",46,[[["self"]],["result",["error"]]]],[11,"write","tokio::io","",55,N],[11,"flush","","",55,[[["self"]],["result",["error"]]]],[11,"write","","",54,N],[11,"flush","","",54,[[["self"]],["result",["error"]]]],[11,"poll","tokio::fs::os::unix","",52,[[["self"]],["result",["async"]]]],[11,"poll","tokio::fs::file","",50,[[["self"]],["result",["async"]]]],[11,"poll","","",51,[[["self"]],["result",["async"]]]],[11,"poll","","",47,[[["self"]],["result",["async"]]]],[11,"poll","","",48,[[["self"]],["result",["async"]]]],[11,"drop","tokio::fs","",46,N],[11,"fmt","tokio::io","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::fs::file","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::fs::os::unix","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::io","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::fs","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::fs::file","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::fs","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::io","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"read","tokio::fs","",46,N],[11,"read","tokio::io","",53,N],[11,"from","tokio::fs","",49,[[["openoptions"]],["openoptions"]]],[11,"shutdown","tokio::io","",54,[[["self"]],["result",["async","error"]]]],[11,"shutdown","tokio::fs","",46,[[["self"]],["result",["async","error"]]]],[11,"shutdown","tokio::io","",55,[[["self"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",53,N],[11,"prepare_uninitialized_buffer","tokio::fs","",46,N],[11,"from","tokio::io","",66,[[["error"]],["error"]]],[11,"clone","tokio::reactor","",172,[[["self"]],["handle"]]],[11,"unpark","","",172,N],[11,"write","","",176,N],[11,"flush","","",176,[[["self"]],["result",["error"]]]],[11,"shutdown","","",176,[[["self"]],["result",["async","error"]]]],[11,"unpark","","",171,N],[11,"park","","",171,[[["self"]],["result",["error"]]]],[11,"park_timeout","","",171,[[["self"],["duration"]],["result",["error"]]]],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",172,[[],["handle"]]],[11,"drop","","",173,N],[11,"drop","","",176,N],[11,"fmt","","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",171,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"read","","",176,N],[11,"clone","tokio::timer::delay_queue","",180,[[["self"]],["key"]]],[11,"poll","tokio::timer","",182,[[["self"]],["result",["async"]]]],[11,"poll","","",178,[[["self"]],["result",["async","error"]]]],[11,"poll","tokio::timer::timeout","",184,[[["self"]],["result",["async"]]]],[11,"description","","",185,[[["self"]],["str"]]],[11,"description","tokio::timer","",181,[[["self"]],["str"]]],[11,"fmt","tokio::timer::timeout","",185,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::timer","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::timer::delay_queue","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::timer","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::timer::delay_queue","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::timer","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",183,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tokio::timer::timeout","",185,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",184,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","tokio::timer","",183,[[["self"]],["result",["async"]]]],[11,"poll","tokio::timer::timeout","",184,[[["self"]],["result",["async"]]]],[11,"write","tokio::net::tcp","",68,N],[11,"flush","","",68,[[["self"]],["result",["error"]]]],[11,"shutdown","","",68,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",68,[[["self"],["b"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",68,N],[11,"read_buf","","",68,[[["self"],["b"]],["result",["async","error"]]]],[11,"as_raw_fd","","",68,[[["self"]],["i32"]]],[11,"as_raw_fd","","",67,[[["self"]],["i32"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"read","","",68,N],[11,"poll","","",75,[[["self"]],["result",["async","error"]]]],[11,"poll","","",76,[[["self"]],["result",["async","error"]]]],[11,"as_raw_fd","tokio::net::udp","",70,[[["self"]],["i32"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",77,[[["self"]],["result",["async","error"]]]],[11,"poll","","",78,[[["self"]],["result",["async","error"]]]],[11,"start_send","","",69,N],[11,"poll_complete","","",69,[[["self"]],["result",["async"]]]],[11,"close","","",69,[[["self"]],["result",["async"]]]],[11,"poll","","",69,[[["self"]],["result",["async"]]]],[11,"clone","tokio::net::unix","",11,[[["self"]],["ucred"]]],[11,"write","","",74,N],[11,"flush","","",74,[[["self"]],["result",["error"]]]],[11,"shutdown","","",74,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",74,[[["self"],["b"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",74,N],[11,"read_buf","","",74,[[["self"],["b"]],["result",["async","error"]]]],[11,"as_raw_fd","","",71,[[["self"]],["i32"]]],[11,"as_raw_fd","","",74,[[["self"]],["i32"]]],[11,"as_raw_fd","","",73,[[["self"]],["i32"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"read","","",74,N],[11,"poll","","",82,[[["self"]],["result",["async"]]]],[11,"poll","","",79,[[["self"]],["result",["async","error"]]]],[11,"poll","","",81,[[["self"]],["result",["async"]]]],[11,"start_send","","",72,N],[11,"poll_complete","","",72,[[["self"]],["result",["async"]]]],[11,"close","","",72,[[["self"]],["result",["async"]]]],[11,"hash","","",11,N],[11,"eq","","",11,[[["self"],["ucred"]],["bool"]]],[11,"ne","","",11,[[["self"],["ucred"]],["bool"]]],[11,"poll","","",80,[[["self"]],["result",["async","error"]]]],[11,"poll","","",72,[[["self"]],["result",["async"]]]],[11,"clone","tokio::codec::length_delimited","",4,[[["self"]],["builder"]]],[11,"clone","tokio::runtime::current_thread","",32,[[["self"]],["handle"]]],[11,"clone","tokio::runtime","",34,[[["self"]],["taskexecutor"]]],[11,"drop","","",35,[[["self"]]]],[11,"fmt","tokio::codec::length_delimited","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio::executor","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio::runtime","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio::runtime::current_thread","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio::runtime","",177,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"description","tokio::codec::length_delimited","",41,[[["self"]],["str"]]],[11,"poll","tokio::runtime","",177,[[["self"]],["poll"]]],[11,"into_future","tokio::executor","",44,N],[11,"execute","tokio::runtime::current_thread","",32,[[["self"],["t"]],["result",["executeerror"]]]],[11,"execute","tokio::runtime","",34,[[["self"],["t"]],["result",["executeerror"]]]],[11,"spawn","","",34,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"decode","tokio::codec::length_delimited","",3,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"encode","","",3,[[["self"],["bytes"],["bytesmut"]],["result",["error"]]]],[11,"new","tokio::codec","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",36,[[["t"],["u"]],["framed"]]],[11,"from_parts","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",36,[[["framedparts"]],["framed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",36,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",36,[[["self"]],["t"]]],[11,"codec","","Returns a reference to the underlying codec wrapped by `Frame`.",36,[[["self"]],["u"]]],[11,"codec_mut","","Returns a mutable reference to the underlying codec wrapped by `Frame`.",36,[[["self"]],["u"]]],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",36,[[["self"]],["t"]]],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream, the buffer with unprocessed data, and the codec.",36,[[["self"]],["framedparts"]]],[11,"new","","Create a new, default, `FramedParts`",2,[[["t"],["u"]],["framedparts"]]],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",37,[[["t"],["d"]],["framedread"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",37,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",37,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",37,[[["self"]],["t"]]],[11,"decoder","","Returns a reference to the underlying decoder.",37,[[["self"]],["d"]]],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",37,[[["self"]],["d"]]],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",38,[[["t"],["e"]],["framedwrite"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",38,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",38,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",38,[[["self"]],["t"]]],[11,"encoder","","Returns a reference to the underlying decoder.",38,[[["self"]],["e"]]],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",38,[[["self"]],["e"]]],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",39,[[],["bytescodec"]]],[11,"new","","Returns a `LinesCodec` for splitting up data into lines.",40,[[],["linescodec"]]],[11,"new_with_max_length","","Returns a `LinesCodec` with a maximum line length limit.",40,[[["usize"]],["linescodec"]]],[11,"max_length","","Returns the maximum line length when decoding.",40,[[["self"]],["usize"]]],[11,"current","tokio::executor","Returns a handle to the default executor for the current context.",42,[[],["defaultexecutor"]]],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",43,[[],["spawnerror"]]],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",43,[[],["spawnerror"]]],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",43,[[["self"]],["bool"]]],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",43,[[["self"]],["bool"]]],[11,"current","tokio::runtime::current_thread","Returns an executor that executes futures on the current thread.",45,[[],["taskexecutor"]]],[11,"spawn_local","","Spawn a future onto the current `CurrentThread` instance.",45,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"open","tokio::fs","Attempts to open a file in read-only mode.",46,[[["p"]],["openfuture"]]],[11,"create","","Opens a file in write-only mode.",46,[[["p"]],["createfuture"]]],[11,"from_std","","Convert a [`std::fs::File`][std] to a [`tokio_fs::File`][file].",46,[[["file"]],["file"]]],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",46,[[["self"],["seekfrom"]],["result",["async","error"]]]],[11,"seek","","Seek to an offset, in bytes, in a stream.",46,[[["self"],["seekfrom"]],["seekfuture"]]],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",46,[[["self"]],["result",["async","error"]]]],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",46,[[["self"]],["result",["async","error"]]]],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",46,[[["self"],["u64"]],["result",["async","error"]]]],[11,"metadata","","Queries metadata about the underlying file.",46,[[["self"]],["metadatafuture"]]],[11,"poll_metadata","","Queries metadata about the underlying file.",46,[[["self"]],["result",["async","error"]]]],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",46,[[["self"]],["result",["async","error"]]]],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",46,[[["self"],["permissions"]],["result",["async","error"]]]],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",46,[[["self"]],["file"]]],[11,"new","","Creates a blank new set of options ready for configuration.",49,[[],["openoptions"]]],[11,"read","","See the underlying [`read`] call for details.",49,[[["self"],["bool"]],["openoptions"]]],[11,"write","","See the underlying [`write`] call for details.",49,[[["self"],["bool"]],["openoptions"]]],[11,"append","","See the underlying [`append`] call for details.",49,[[["self"],["bool"]],["openoptions"]]],[11,"truncate","","See the underlying [`truncate`] call for details.",49,[[["self"],["bool"]],["openoptions"]]],[11,"create","","See the underlying [`create`] call for details.",49,[[["self"],["bool"]],["openoptions"]]],[11,"create_new","","See the underlying [`create_new`] call for details.",49,[[["self"],["bool"]],["openoptions"]]],[11,"open","","Opens a file at `path` with the options specified by `self`.",49,[[["self"],["p"]],["openfuture"]]],[11,"into_inner","tokio::io","Returns the underlying I/O object.",58,[[["self"]],["a"]]],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",66,[[["errorkind"],["e"]],["error"]]],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",66,[[],["error"]]],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",66,[[["i32"]],["error"]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",66,[[["self"]],["option",["i32"]]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",66,[[["self"]],["option",["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",66,[[["self"]],["option",["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",66,[[["self"]],["option",["box"]]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",66,[[["self"]],["errorkind"]]],[11,"bind","tokio::net::tcp","Create a new TCP listener associated with this event loop.",67,[[["socketaddr"]],["result",["tcplistener","error"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",67,[[["self"]],["result",["async","error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",67,[[["self"]],["result",["async","error"]]]],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",67,[[["tcplistener"],["handle"]],["result",["tcplistener","error"]]]],[11,"local_addr","","Returns the local address that this listener is bound to.",67,[[["self"]],["result",["socketaddr","error"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",67,[[["self"]],["incoming"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",67,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",67,[[["self"],["u32"]],["result",["error"]]]],[11,"connect","","Create a new TCP stream connected to the specified address.",68,[[["socketaddr"]],["connectfuture"]]],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",68,[[["tcpstream"],["handle"]],["result",["tcpstream","error"]]]],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",68,[[["tcpstream"],["socketaddr"],["handle"]],["connectfuture"]]],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",68,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",68,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the local address that this stream is bound to.",68,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the remote address that this stream is connected to. # Examples",68,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",68,N],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",68,[[["self"],["shutdown"]],["result",["error"]]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",68,[[["self"]],["result",["bool","error"]]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",68,[[["self"],["bool"]],["result",["error"]]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",68,[[["self"]],["result",["usize","error"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",68,[[["self"],["usize"]],["result",["error"]]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",68,[[["self"]],["result",["usize","error"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",68,[[["self"],["usize"]],["result",["error"]]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",68,[[["self"]],["result",["option","error"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",68,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",68,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",68,[[["self"],["u32"]],["result",["error"]]]],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",68,[[["self"]],["result",["option","error"]]]],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",68,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",68,[[["self"]],["result",["tcpstream","error"]]]],[11,"new","tokio::net::udp","Create a new `UdpFramed` backed by the given socket and codec.",69,[[["udpsocket"],["c"]],["udpframed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",69,[[["self"]],["udpsocket"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",69,[[["self"]],["udpsocket"]]],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",69,[[["self"]],["udpsocket"]]],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",70,[[["socketaddr"]],["result",["udpsocket","error"]]]],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",70,[[["udpsocket"],["handle"]],["result",["udpsocket","error"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",70,[[["self"]],["result",["socketaddr","error"]]]],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",70,[[["self"],["socketaddr"]],["result",["error"]]]],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",70,N],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",70,N],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",70,N],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",70,[[["self"],["t"],["socketaddr"]],["senddgram"]]],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",70,N],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",70,[[["self"],["t"]],["recvdgram"]]],[11,"poll_read_ready","","Check the UDP socket's read readiness state.",70,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Check the UDP socket's write readiness state.",70,[[["self"]],["result",["async","error"]]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",70,[[["self"]],["result",["bool","error"]]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",70,[[["self"],["bool"]],["result",["error"]]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",70,[[["self"]],["result",["bool","error"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",70,[[["self"],["bool"]],["result",["error"]]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",70,[[["self"]],["result",["u32","error"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",70,[[["self"],["u32"]],["result",["error"]]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",70,[[["self"]],["result",["bool","error"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",70,[[["self"],["bool"]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",70,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",70,[[["self"],["u32"]],["result",["error"]]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",70,[[["self"],["ipv4addr"],["ipv4addr"]],["result",["error"]]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",70,[[["self"],["ipv6addr"],["u32"]],["result",["error"]]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",70,[[["self"],["ipv4addr"],["ipv4addr"]],["result",["error"]]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",70,[[["self"],["ipv6addr"],["u32"]],["result",["error"]]]],[11,"bind","tokio::net::unix","Creates a new `UnixDatagram` bound to the specified path.",71,[[["p"]],["result",["unixdatagram","error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",71,[[],["result",["error"]]]],[11,"from_std","","Consumes a `UnixDatagram` in the standard library and returns a nonblocking `UnixDatagram` from this crate.",71,[[["unixdatagram"],["handle"]],["result",["unixdatagram","error"]]]],[11,"unbound","","Creates a new `UnixDatagram` which is not bound to any address.",71,[[],["result",["unixdatagram","error"]]]],[11,"connect","","Connects the socket to the specified address.",71,[[["self"],["p"]],["result",["error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",71,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",71,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",71,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the address of this socket's peer.",71,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_recv_from","","Receives data from the socket.",71,N],[11,"poll_recv","","Receives data from the socket.",71,N],[11,"recv_dgram","","Returns a future for receiving a datagram. See the documentation on RecvDgram for details.",71,[[["self"],["t"]],["recvdgram"]]],[11,"poll_send_to","","Sends data on the socket to the specified address.",71,N],[11,"poll_send","","Sends data on the socket to the socket's peer.",71,N],[11,"send_dgram","","Returns a future sending the data in buf to the socket at path.",71,[[["self"],["t"],["p"]],["senddgram"]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",71,[[["self"]],["result",["option","error"]]]],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",71,[[["self"],["shutdown"]],["result",["error"]]]],[11,"new","","Create a new `UnixDatagramFramed` backed by the given socket and codec.",72,[[["unixdatagram"],["c"]],["unixdatagramframed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",72,[[["self"]],["unixdatagram"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",72,[[["self"]],["unixdatagram"]]],[11,"bind","","Creates a new `UnixListener` bound to the specified path.",73,[[["p"]],["result",["unixlistener","error"]]]],[11,"from_std","","Consumes a `UnixListener` in the standard library and returns a nonblocking `UnixListener` from this crate.",73,[[["unixlistener"],["handle"]],["result",["unixlistener","error"]]]],[11,"local_addr","","Returns the local socket address of this listener.",73,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",73,[[["self"],["ready"]],["result",["async","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",73,[[["self"]],["result",["option","error"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",73,[[["self"]],["result",["async","error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",73,[[["self"]],["result",["async","error"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",73,[[["self"]],["incoming"]]],[11,"connect","","Connects to the socket named by `path`.",74,[[["p"]],["connectfuture"]]],[11,"from_std","","Consumes a `UnixStream` in the standard library and returns a nonblocking `UnixStream` from this crate.",74,[[["unixstream"],["handle"]],["result",["unixstream","error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",74,[[],["result",["error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",74,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",74,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the socket address of the local half of this connection.",74,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",74,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_cred","","Returns effective credentials of the process which called `connect` or `pair`.",74,[[["self"]],["result",["ucred","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",74,[[["self"]],["result",["option","error"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",74,[[["self"],["shutdown"]],["result",["error"]]]],[11,"into_parts","tokio::net::udp","Consume the `RecvDgram`, returning the socket and buffer.",77,[[["self"]],["parts"]]],[11,"new","tokio::prelude::future","Create a new `ExecuteError`",83,[[["executeerrorkind"],["f"]],["executeerror"]]],[11,"kind","","Returns the associated reason for the error",83,[[["self"]],["executeerrorkind"]]],[11,"into_future","","Consumes self and returns the original future that was spawned.",83,[[["self"]],["f"]]],[11,"is_done","","Returns whether the underlying future has finished or not.",89,[[["self"]],["bool"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",96,[[["self"]],["option",["result"]]]],[11,"split","","Splits out the homogeneous type from an either of tuples.",18,N],[11,"new","tokio::prelude::stream::futures_unordered","Constructs a new, empty `FuturesUnordered`",114,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",114,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures",114,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",114,N],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",114,[[["self"]],["itermut"]]],[11,"get_ref","tokio::prelude::stream","Acquires a reference to the underlying stream that this combinator is pulling from.",116,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",116,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",116,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",117,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",117,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",117,[[["self"]],["s"]]],[11,"new","","Constructs a new, empty `FuturesOrdered`",118,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",118,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",118,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",118,N],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",121,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",121,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",121,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",122,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",122,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",122,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",125,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",125,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",125,[[["self"]],["s"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",128,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",131,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",131,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",131,[[["self"]],["s"]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",132,[[["self"]],["result",["async"]]]],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",133,[[["self"]],["option"]]],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",133,[[["self"]],["option"]]],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",133,[[["self"]],["option"]]],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",133,[[["self"]],["option"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",135,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",135,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",135,[[["self"]],["option"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",136,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",136,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",136,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",137,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",137,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",137,[[["self"]],["s"]]],[11,"send","","Sends a new value along this channel to the receiver.",138,[[["self"],["result"]],["futuresender"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",139,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",140,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",140,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",140,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",142,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",142,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",142,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",143,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",143,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",143,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",144,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",144,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",144,[[["self"]],["s"]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",145,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",145,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",145,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",145,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",146,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",146,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",146,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",156,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",156,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",156,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",157,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",157,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",157,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",159,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",159,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",159,[[["self"]],["s"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",163,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",163,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",163,[[["self"]],["s"]]],[11,"map","tokio::prelude","Change the success value of this `Async` with the closure provided",23,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",23,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",23,[[["self"]],["bool"]]],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",24,[[["self"],["f"]],["asyncsink"]]],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",24,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",24,[[["self"]],["bool"]]],[11,"new","tokio::prelude::task","Create an `AtomicTask` initialized with the given `Task`",164,[[],["atomictask"]]],[11,"register","","Registers the current task to be notified on calls to `notify`.",164,N],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",164,N],[11,"notify","","Notifies the task that last called `register`.",164,N],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",165,N],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",166,[[["arc",["eventset"]],["usize"]],["unparkevent"]]],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",167,N],[11,"is_current","","Returns `true` when called from within the context of the task.",167,[[["self"]],["bool"]]],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",167,[[["self"]],["bool"]]],[11,"new","","Inserts a new piece of task-local data into this task, returning a reference to it.",168,[[["a"]],["taskrc"]]],[11,"with","","Operate with a reference to the underlying data.",168,[[["self"],["f"]],["r"]]],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",169,[[["self"]],["result"]]],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",169,[[["self"]],["option",["result"]]]],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",169,N],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",169,[[["self"]],["result"]]],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",169,[[["self"]],["result"]]],[11,"get_ref","","Get a shared reference to the object the Spawn is wrapping.",169,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",169,[[["self"]],["t"]]],[11,"into_inner","","Consume the Spawn, returning its inner object",169,[[["self"]],["t"]]],[11,"poll_fn_notify","","Calls the provided closure, scheduling notifications to be sent to the `notify` argument.",169,[[["self"],["n"],["usize"],["f"]],["r"]]],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",169,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",169,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",169,N],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",169,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",169,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",170,[[["self"],["f"]],["r"]]],[11,"new","tokio::reactor","Creates a new event loop, returning any error that happened during the creation.",171,[[],["result",["reactor","error"]]]],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",171,[[["self"]],["handle"]]],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",171,[[["self"]],["result",["setfallbackerror"]]]],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",171,[[["self"],["option",["duration"]]],["result",["turn","error"]]]],[11,"is_idle","","Returns true if the reactor is currently idle.",171,[[["self"]],["bool"]]],[11,"background","","Run this reactor on a background thread.",171,[[["self"]],["result",["background","error"]]]],[11,"current","","Returns a handle to the current reactor.",172,[[],["handle"]]],[11,"handle","","Returns a reference to the reactor handle.",173,[[["self"]],["handle"]]],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",173,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the reactor immediately",173,[[["self"]],["shutdown"]]],[11,"forget","","Run the reactor on its thread until the process terminates.",173,N],[11,"new","","Create a new `Registration`.",175,[[],["registration"]]],[11,"register","","Register the I/O resource with the default reactor.",175,[[["self"],["t"]],["result",["bool","error"]]]],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",175,[[["self"],["t"]],["result",["error"]]]],[11,"register_with","","Register the I/O resource with the specified reactor.",175,[[["self"],["t"],["handle"]],["result",["bool","error"]]]],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",175,[[["self"]],["result",["async","error"]]]],[11,"take_read_ready","","Consume any pending read readiness event.",175,[[["self"]],["result",["option","error"]]]],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",175,[[["self"]],["result",["async","error"]]]],[11,"take_write_ready","","Consume any pending write readiness event.",175,[[["self"]],["result",["option","error"]]]],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",176,[[["e"]],["pollevented"]]],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",176,[[["e"],["handle"]],["result",["pollevented","error"]]]],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",176,[[["self"]],["e"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",176,[[["self"]],["e"]]],[11,"into_inner","","Consumes self, returning the inner I/O object",176,[[["self"]],["result",["error"]]]],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",176,[[["self"],["ready"]],["result",["async","error"]]]],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",176,[[["self"],["ready"]],["result",["error"]]]],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",176,[[["self"]],["result",["async","error"]]]],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",176,[[["self"]],["result",["error"]]]],[11,"new","tokio::timer","Create a new, empty, `DelayQueue`",178,[[],["delayqueue"]]],[11,"with_capacity_and_handle","","Create a new, empty, `DelayQueue` backed by the specified timer.",178,[[["usize"],["handle"]],["delayqueue"]]],[11,"with_capacity","","Create a new, empty, `DelayQueue` with the specified capacity.",178,[[["usize"]],["delayqueue"]]],[11,"insert_at","","Insert `value` into the queue set to expire at a specific instant in time.",178,[[["self"],["t"],["instant"]],["key"]]],[11,"insert","","Insert `value` into the queue set to expire after the requested duration elapses.",178,[[["self"],["t"],["duration"]],["key"]]],[11,"remove","","Remove the item associated with `key` from the queue.",178,[[["self"],["key"]],["expired"]]],[11,"reset_at","","Sets the delay of the item associated with `key` to expire at `when`.",178,N],[11,"reset","","Sets the delay of the item associated with `key` to expire after `timeout`.",178,N],[11,"clear","","Clears the queue, removing all items.",178,N],[11,"capacity","","Returns the number of elements the queue can hold without reallocating.",178,[[["self"]],["usize"]]],[11,"reserve","","Reserve capacity for at least `additional` more items to be queued without allocating.",178,N],[11,"is_empty","","Returns `true` if there are no items in the queue.",178,[[["self"]],["bool"]]],[11,"get_ref","tokio::timer::delay_queue","Returns a reference to the inner value.",179,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the inner value.",179,[[["self"]],["t"]]],[11,"into_inner","","Consumes `self` and returns the inner value.",179,[[["self"]],["t"]]],[11,"shutdown","tokio::timer","Create an error representing a shutdown timer.",181,[[],["error"]]],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",181,[[["self"]],["bool"]]],[11,"at_capacity","","Create an error representing a timer at capacity.",181,[[],["error"]]],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",181,[[["self"]],["bool"]]],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",182,[[["instant"],["duration"]],["interval"]]],[11,"new_interval","","Creates new `Interval` that yields with interval of `duration`.",182,[[["duration"]],["interval"]]],[11,"new","","Create a new `Delay` instance that elapses at `deadline`.",183,[[["instant"]],["delay"]]],[11,"deadline","","Returns the instant at which the future will complete.",183,[[["self"]],["instant"]]],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",183,[[["self"]],["bool"]]],[11,"reset","","Reset the `Delay` instance to a new deadline.",183,N],[11,"new","tokio::timer::timeout","Create a new `Timeout` that allows `value` to execute for a duration of at most `timeout`.",184,[[["t"],["duration"]],["timeout"]]],[11,"get_ref","","Gets a reference to the underlying value in this timeout.",184,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying value in this timeout.",184,[[["self"]],["t"]]],[11,"into_inner","","Consumes this timeout, returning the underlying value.",184,[[["self"]],["t"]]],[11,"new_at","","Create a new `Timeout` that completes when `future` completes or when `deadline` is reached.",184,[[["t"],["instant"]],["timeout"]]],[11,"inner","","Create a new `Error` representing the inner value completing with `Err`.",185,[[["t"]],["error"]]],[11,"is_inner","","Returns `true` if the error was caused by the inner value completing with `Err`.",185,[[["self"]],["bool"]]],[11,"into_inner","","Consumes `self`, returning the inner future error.",185,[[["self"]],["option"]]],[11,"elapsed","","Create a new `Error` representing the inner value not completing before the deadline is reached.",185,[[],["error"]]],[11,"is_elapsed","","Returns `true` if the error was caused by the inner value not completing before the deadline is reached.",185,[[["self"]],["bool"]]],[11,"timer","","Creates a new `Error` representing an error encountered by the timer implementation",185,[[["error"]],["error"]]],[11,"is_timer","","Returns `true` if the error was caused by the timer.",185,[[["self"]],["bool"]]],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",185,[[["self"]],["option",["error"]]]]],"paths":[[8,"Decoder"],[8,"Encoder"],[3,"FramedParts"],[3,"LengthDelimitedCodec"],[3,"Builder"],[8,"Executor"],[8,"AsyncRead"],[8,"AsyncWrite"],[4,"ErrorKind"],[8,"Read"],[8,"Write"],[3,"UCred"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[4,"ExecuteErrorKind"],[4,"Loop"],[4,"Either"],[8,"Stream"],[3,"ReuniteError"],[4,"MergedItem"],[8,"Sink"],[4,"Async"],[4,"AsyncSink"],[8,"Executor"],[8,"EventSet"],[8,"Unpark"],[8,"FutureExt"],[8,"StreamExt"],[3,"Builder"],[3,"Builder"],[3,"Handle"],[3,"Runtime"],[3,"TaskExecutor"],[3,"Runtime"],[3,"Framed"],[3,"FramedRead"],[3,"FramedWrite"],[3,"BytesCodec"],[3,"LinesCodec"],[3,"FrameTooBig"],[3,"DefaultExecutor"],[3,"SpawnError"],[3,"Spawn"],[3,"TaskExecutor"],[3,"File"],[3,"CreateFuture"],[3,"SeekFuture"],[3,"OpenOptions"],[3,"OpenFuture"],[3,"MetadataFuture"],[3,"SymlinkFuture"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[3,"Copy"],[3,"Flush"],[3,"Lines"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"ReadHalf"],[3,"Shutdown"],[3,"WriteAll"],[3,"WriteHalf"],[3,"Error"],[3,"TcpListener"],[3,"TcpStream"],[3,"UdpFramed"],[3,"UdpSocket"],[3,"UnixDatagram"],[3,"UnixDatagramFramed"],[3,"UnixListener"],[3,"UnixStream"],[3,"ConnectFuture"],[3,"Incoming"],[3,"RecvDgram"],[3,"SendDgram"],[3,"ConnectFuture"],[3,"Incoming"],[3,"RecvDgram"],[3,"SendDgram"],[3,"ExecuteError"],[3,"AndThen"],[3,"Join4"],[3,"Err"],[3,"Inspect"],[3,"CatchUnwind"],[3,"Fuse"],[3,"LoopFn"],[3,"MapErr"],[3,"Then"],[3,"PollFn"],[3,"SharedItem"],[3,"SelectNext"],[3,"Shared"],[3,"Join5"],[3,"Empty"],[3,"Collect"],[3,"OrElse"],[3,"Lazy"],[3,"Join3"],[3,"SharedError"],[3,"FlattenStream"],[3,"Map"],[3,"Flatten"],[3,"SelectAll"],[3,"Select2"],[3,"Join"],[3,"Select"],[3,"SelectOk"],[3,"FromErr"],[3,"IntoStream"],[3,"FuturesUnordered"],[3,"IterMut"],[3,"Skip"],[3,"FilterMap"],[3,"FuturesOrdered"],[3,"CatchUnwind"],[3,"IterResult"],[3,"MapErr"],[3,"Filter"],[3,"Zip"],[3,"PollFn"],[3,"BufferUnordered"],[3,"Iter"],[3,"Fold"],[3,"SplitStream"],[3,"OrElse"],[3,"Concat"],[3,"InspectErr"],[3,"Peekable"],[3,"Forward"],[3,"Receiver"],[3,"StreamFuture"],[3,"Take"],[3,"Chunks"],[3,"Sender"],[3,"SplitSink"],[3,"FromErr"],[3,"Unfold"],[3,"AndThen"],[3,"Inspect"],[3,"Wait"],[3,"Fuse"],[3,"TakeWhile"],[3,"Then"],[3,"Concat2"],[3,"ForEach"],[3,"Empty"],[3,"Repeat"],[3,"Merge"],[3,"Collect"],[3,"Once"],[3,"SendError"],[3,"Map"],[3,"Flatten"],[3,"Chain"],[3,"SkipWhile"],[3,"IterOk"],[3,"Select"],[3,"FutureSender"],[3,"Buffered"],[3,"AtomicTask"],[3,"Run"],[3,"UnparkEvent"],[3,"Task"],[3,"TaskRc"],[3,"Spawn"],[3,"LocalKey"],[3,"Reactor"],[3,"Handle"],[3,"Background"],[3,"Turn"],[3,"Registration"],[3,"PollEvented2"],[3,"Shutdown"],[3,"DelayQueue"],[3,"Expired"],[3,"Key"],[3,"Error"],[3,"Interval"],[3,"Delay"],[3,"Timeout"],[3,"Error"]]};
searchIndex["tokio_async_await"]={"doc":"","items":[],"paths":[]};
searchIndex["tokio_buf"]={"doc":"Asynchronous stream of bytes.","items":[[0,"buf_stream","tokio_buf","Types and utilities for working with `BufStream`.",N,N],[3,"Chain","tokio_buf::buf_stream","A buf stream that sequences two buf streams together.",N,N],[3,"Collect","","Consumes a buf stream, collecting the data into a single byte container.",N,N],[3,"Limit","","Limits the stream to a maximum amount of data.",N,N],[3,"SizeHint","","A `BufStream` size hint",N,N],[0,"errors","","Error types",N,N],[3,"CollectError","tokio_buf::buf_stream::errors","Errors returned from `Collect` future.",N,N],[3,"CollectVecError","","Error returned from collecting into a `Vec<u8>`",N,N],[3,"LimitError","","Errors returned from `Limit`.",N,N],[11,"is_stream_err","","Returns `true` if the error was caused by polling the stream.",0,[[["self"]],["bool"]]],[11,"is_limit_err","","Returns `true` if the stream reached its limit.",0,[[["self"]],["bool"]]],[11,"new","tokio_buf::buf_stream","Returns a new `SizeHint` with default values",1,[[],["sizehint"]]],[11,"lower","","Returns the lower bound of data that the `BufStream` will yield before completing.",1,[[["self"]],["u64"]]],[11,"set_lower","","Set the value of the `lower` hint.",1,[[["self"],["u64"]]]],[11,"upper","","Returns the upper bound of data the `BufStream` will yield before completing, or `None` if the value is unknown.",1,[[["self"]],["option",["u64"]]]],[11,"set_upper","","Set the value of the `upper` hint value.",1,[[["self"],["u64"]]]],[8,"FromBufStream","","Conversion from a `BufStream`.",N,N],[16,"Builder","","Type that is used to build `Self` while the `BufStream` is being consumed.",2,N],[16,"Error","","Error that might happen on conversion.",2,N],[10,"builder","","Create a new, empty, builder. The provided `hint` can be used to inform reserving capacity.",2,N],[10,"extend","","Extend the builder with the `Buf`.",2,N],[10,"build","","Finalize the building of `Self`.",2,N],[8,"BufStream","","An asynchronous stream of bytes.",N,N],[16,"Item","","Values yielded by the `BufStream`.",3,N],[16,"Error","","The error type this `BufStream` might generate.",3,N],[10,"poll_buf","","Attempt to pull out the next buffer of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",3,[[["self"]],["poll",["option"]]]],[11,"size_hint","","Returns the bounds on the remaining length of the stream.",3,[[["self"]],["sizehint"]]],[11,"consume_hint","","Indicates to the `BufStream` how much data the consumer is currently able to process.",3,[[["self"],["usize"]]]],[11,"chain","","Takes two buf streams and creates a new buf stream over both in sequence.",3,[[["self"],["t"]],["chain"]]],[11,"collect","","Consumes all data from `self`, storing it in byte storage of type `T`.",3,[[["self"]],["collect"]]],[11,"limit","","Limit the number of bytes that the stream can yield.",3,[[["self"],["u64"]],["limit"]]],[8,"BufStream","tokio_buf","An asynchronous stream of bytes.",N,N],[16,"Item","","Values yielded by the `BufStream`.",3,N],[16,"Error","","The error type this `BufStream` might generate.",3,N],[10,"poll_buf","","Attempt to pull out the next buffer of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",3,[[["self"]],["poll",["option"]]]],[11,"size_hint","","Returns the bounds on the remaining length of the stream.",3,[[["self"]],["sizehint"]]],[11,"consume_hint","","Indicates to the `BufStream` how much data the consumer is currently able to process.",3,[[["self"],["usize"]]]],[11,"chain","","Takes two buf streams and creates a new buf stream over both in sequence.",3,[[["self"],["t"]],["chain"]]],[11,"collect","","Consumes all data from `self`, storing it in byte storage of type `T`.",3,[[["self"]],["collect"]]],[11,"limit","","Limit the number of bytes that the stream can yield.",3,[[["self"],["u64"]],["limit"]]],[11,"from","tokio_buf::buf_stream","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into_future","","",5,[[["self"]],["f"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","tokio_buf::buf_stream::errors","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"poll_buf","tokio_buf::buf_stream","",4,[[["self"]],["poll",["option"]]]],[11,"size_hint","","",4,[[["self"]],["sizehint"]]],[11,"poll_buf","","",6,[[["self"]],["poll",["option"]]]],[11,"size_hint","","",6,[[["self"]],["sizehint"]]],[11,"consume_hint","","",6,[[["self"],["usize"]]]],[11,"clone","","",1,[[["self"]],["sizehint"]]],[11,"default","","",1,[[],["sizehint"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_buf::buf_stream::errors","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_buf::buf_stream","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_buf::buf_stream::errors","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_buf::buf_stream","",1,[[["self"],["formatter"]],["result"]]],[11,"poll","","",5,[[["self"]],["poll"]]],[11,"is_stream_err","tokio_buf::buf_stream::errors","Returns `true` if the error was caused by polling the stream.",7,[[["self"]],["bool"]]],[11,"is_collect_err","","Returns `true` if the error happened while collecting the data.",7,[[["self"]],["bool"]]]],"paths":[[3,"LimitError"],[3,"SizeHint"],[8,"FromBufStream"],[8,"BufStream"],[3,"Chain"],[3,"Collect"],[3,"Limit"],[3,"CollectError"],[3,"CollectVecError"]]};
searchIndex["tokio_channel"]={"doc":"Asynchronous channels.","items":[[0,"mpsc","tokio_channel","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",N,N],[3,"Sender","tokio_channel::mpsc","The transmission end of a channel which is used to send values.",N,N],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",N,N],[3,"TrySendError","","Error type returned from `try_send`",N,N],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",N,N],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",N,N],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",0,[[["self"]],["t"]]],[11,"is_full","","Returns true if this error is a result of the channel being full",1,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped",1,[[["self"]],["bool"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",1,[[["self"]],["t"]]],[11,"try_send","","Attempts to send a message on this `Sender<T>` without blocking.",2,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"poll_ready","","Polls the channel to determine if there is guaranteed to be capacity to send at least one item without waiting.",2,[[["self"]],["poll",["senderror"]]]],[11,"unbounded_send","","Sends the provided message along this channel.",3,[[["self"],["t"]],["result",["senderror"]]]],[11,"close","","Closes the receiving half",4,[[["self"]]]],[0,"oneshot","tokio_channel","A one-shot, futures-aware channel",N,N],[3,"Receiver","tokio_channel::oneshot","A future representing the completion of a computation happening elsewhere in memory.",N,N],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",N,N],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the corresponding `Sender<T>` is dropped.",N,N],[5,"channel","","Creates a new futures-aware, one-shot channel.",N,N],[11,"send","","Completes this oneshot with a successful result.",5,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",5,[[["self"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",5,[[["self"]],["bool"]]],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",6,[[["self"]]]],[11,"from","tokio_channel::mpsc","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","tokio_channel::oneshot","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into_future","","",6,[[["self"]],["f"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"clone","tokio_channel::mpsc","",0,[[["self"]],["senderror"]]],[11,"clone","","",1,[[["self"]],["trysenderror"]]],[11,"clone","","",3,[[["self"]],["unboundedsender"]]],[11,"clone","","",2,[[["self"]],["sender"]]],[11,"clone","tokio_channel::oneshot","",7,[[["self"]],["canceled"]]],[11,"drop","tokio_channel::mpsc","",2,[[["self"]]]],[11,"drop","","",4,[[["self"]]]],[11,"drop","tokio_channel::oneshot","",5,[[["self"]]]],[11,"drop","","",6,[[["self"]]]],[11,"eq","tokio_channel::mpsc","",0,[[["self"],["senderror"]],["bool"]]],[11,"ne","","",0,[[["self"],["senderror"]],["bool"]]],[11,"eq","","",1,[[["self"],["trysenderror"]],["bool"]]],[11,"ne","","",1,[[["self"],["trysenderror"]],["bool"]]],[11,"eq","tokio_channel::oneshot","",7,[[["self"],["canceled"]],["bool"]]],[11,"fmt","tokio_channel::mpsc","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_channel::oneshot","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_channel::mpsc","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_channel::oneshot","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"description","tokio_channel::mpsc","",0,[[["self"]],["str"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"description","tokio_channel::oneshot","",7,[[["self"]],["str"]]],[11,"poll","","",6,[[["self"]],["poll",["canceled"]]]],[11,"poll","tokio_channel::mpsc","",4,[[["self"]],["poll",["option"]]]],[11,"start_send","","",2,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",2,[[["self"]],["poll",["senderror"]]]],[11,"close","","",2,[[["self"]],["poll",["senderror"]]]],[11,"start_send","","",3,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",3,[[["self"]],["poll",["senderror"]]]],[11,"close","","",3,[[["self"]],["poll",["senderror"]]]]],"paths":[[3,"SendError"],[3,"TrySendError"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"Sender"],[3,"Receiver"],[3,"Canceled"]]};
searchIndex["tokio_codec"]={"doc":"Utilities for encoding and decoding frames.","items":[[8,"Decoder","tokio_codec","Decoding of frames via buffers.",N,N],[16,"Item","","The type of decoded frames.",0,N],[16,"Error","","The type of unrecoverable frame decoding errors.",0,N],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",0,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",0,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",0,[[["self"],["t"]],["framed"]]],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",N,N],[16,"Item","","The type of items consumed by the `Encoder`",1,N],[16,"Error","","The type of encoding errors.",1,N],[10,"encode","","Encodes a frame into the buffer provided.",1,N],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",N,N],[12,"io","","The inner transport used to read bytes to and write bytes to",2,N],[12,"codec","","The codec",2,N],[12,"read_buf","","The buffer with read but unprocessed data.",2,N],[12,"write_buf","","A buffer with unprocessed data which are not written yet.",2,N],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",N,N],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",N,N],[3,"BytesCodec","","A simple `Codec` implementation that just ships bytes around.",N,N],[3,"LinesCodec","","A simple `Codec` implementation that splits up data into lines.",N,N],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",3,[[],["bytescodec"]]],[11,"new","","Returns a `LinesCodec` for splitting up data into lines.",4,[[],["linescodec"]]],[11,"new_with_max_length","","Returns a `LinesCodec` with a maximum line length limit.",4,[[["usize"]],["self"]]],[11,"max_length","","Returns the maximum line length when decoding.",4,[[["self"]],["usize"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",6,[[["self"]],["result",["async"]]]],[11,"poll","","",5,[[["self"]],["result",["async"]]]],[11,"poll","","",7,[[["self"]],["result",["async"]]]],[11,"start_send","","",5,N],[11,"poll_complete","","",5,[[["self"]],["result",["async"]]]],[11,"close","","",5,[[["self"]],["result",["async"]]]],[11,"start_send","","",7,N],[11,"poll_complete","","",7,[[["self"]],["result",["async"]]]],[11,"close","","",7,[[["self"]],["result",["async"]]]],[11,"start_send","","",6,N],[11,"poll_complete","","",6,[[["self"]],["result",["async"]]]],[11,"close","","",6,[[["self"]],["result",["async"]]]],[11,"clone","","",3,[[["self"]],["bytescodec"]]],[11,"clone","","",4,[[["self"]],["linescodec"]]],[11,"partial_cmp","","",3,[[["self"],["bytescodec"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"le","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"gt","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"ge","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["linescodec"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"le","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"gt","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"ge","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"eq","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"ne","","",3,[[["self"],["bytescodec"]],["bool"]]],[11,"eq","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"ne","","",4,[[["self"],["linescodec"]],["bool"]]],[11,"cmp","","",3,[[["self"],["bytescodec"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["linescodec"]],["ordering"]]],[11,"hash","","",3,N],[11,"hash","","",4,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"decode","","",3,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode","","",4,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode_eof","","",4,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"encode","","",3,[[["self"],["bytes"],["bytesmut"]],["result",["error"]]]],[11,"encode","","",4,[[["self"],["string"],["bytesmut"]],["result",["error"]]]],[11,"new","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",5,[[["t"],["u"]],["framed"]]],[11,"from_parts","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",5,[[["framedparts"]],["framed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",5,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",5,[[["self"]],["t"]]],[11,"codec","","Returns a reference to the underlying codec wrapped by `Frame`.",5,[[["self"]],["u"]]],[11,"codec_mut","","Returns a mutable reference to the underlying codec wrapped by `Frame`.",5,[[["self"]],["u"]]],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",5,[[["self"]],["t"]]],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream, the buffer with unprocessed data, and the codec.",5,[[["self"]],["framedparts"]]],[11,"new","","Create a new, default, `FramedParts`",2,[[["t"],["u"]],["framedparts"]]],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",6,[[["t"],["d"]],["framedread"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",6,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",6,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",6,[[["self"]],["t"]]],[11,"decoder","","Returns a reference to the underlying decoder.",6,[[["self"]],["d"]]],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",6,[[["self"]],["d"]]],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",7,[[["t"],["e"]],["framedwrite"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",7,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",7,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",7,[[["self"]],["t"]]],[11,"encoder","","Returns a reference to the underlying decoder.",7,[[["self"]],["e"]]],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",7,[[["self"]],["e"]]]],"paths":[[8,"Decoder"],[8,"Encoder"],[3,"FramedParts"],[3,"BytesCodec"],[3,"LinesCodec"],[3,"Framed"],[3,"FramedRead"],[3,"FramedWrite"]]};
searchIndex["tokio_current_thread"]={"doc":"A single-threaded executor which executes tasks on the same thread from which they are spawned.","items":[[3,"CurrentThread","tokio_current_thread","Executes tasks on the current thread",N,N],[3,"TaskExecutor","","Executes futures on the current thread.",N,N],[3,"Turn","","Returned by the `turn` function.",N,N],[3,"Entered","","A `CurrentThread` instance bound to a supplied execution context.",N,N],[3,"RunError","","Error returned by the `run` function.",N,N],[3,"RunTimeoutError","","Error returned by the `run_timeout` function.",N,N],[3,"TurnError","","Error returned by the `turn` function.",N,N],[3,"BlockError","","Error returned by the `block_on` function.",N,N],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` instance",N,N],[5,"block_on_all","","Run the executor bootstrapping the execution with the provided future.",N,[[["f"]],["result"]]],[5,"spawn","","Executes a future on the current thread.",N,[[["f"]]]],[11,"has_polled","","`true` if any futures were polled at all and `false` otherwise.",0,[[["self"]],["bool"]]],[11,"new","","Create a new instance of `CurrentThread`.",1,[[],["self"]]],[11,"new_with_park","","Create a new instance of `CurrentThread` backed by the given park handle.",1,[[["p"]],["self"]]],[11,"is_idle","","Returns `true` if the executor is currently idle.",1,[[["self"]],["bool"]]],[11,"spawn","","Spawn the future on the executor.",1,[[["self"],["f"]],["self"]]],[11,"block_on","","Synchronously waits for the provided `future` to complete.",1,[[["self"],["f"]],["result",["blockerror"]]]],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",1,[[["self"]],["result",["runerror"]]]],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",1,[[["self"],["duration"]],["result",["runtimeouterror"]]]],[11,"turn","","Perform a single iteration of the event loop.",1,[[["self"],["option",["duration"]]],["result",["turn","turnerror"]]]],[11,"enter","","Bind `CurrentThread` instance with an execution context.",1,[[["self"],["enter"]],["entered"]]],[11,"get_park","","Returns a reference to the underlying `Park` instance.",1,[[["self"]],["p"]]],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",1,[[["self"]],["p"]]],[11,"handle","","Get a new handle to spawn futures on the executor",1,[[["self"]],["handle"]]],[11,"spawn","","Spawn the future on the executor.",2,[[["self"],["f"]],["self"]]],[11,"block_on","","Synchronously waits for the provided `future` to complete.",2,[[["self"],["f"]],["result",["blockerror"]]]],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",2,[[["self"]],["result",["runerror"]]]],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",2,[[["self"],["duration"]],["result",["runtimeouterror"]]]],[11,"turn","","Perform a single iteration of the event loop.",2,[[["self"],["option",["duration"]]],["result",["turn","turnerror"]]]],[11,"get_park","","Returns a reference to the underlying `Park` instance.",2,[[["self"]],["p"]]],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",2,[[["self"]],["p"]]],[11,"spawn","","Spawn a future onto the `CurrentThread` instance corresponding to this handle",3,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",3,[[["self"]],["result",["spawnerror"]]]],[11,"current","","Returns an executor that executes futures on the current thread.",4,[[],["taskexecutor"]]],[11,"spawn_local","","Spawn a future onto the current `CurrentThread` instance.",4,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"is_timeout","","Returns `true` if the error was caused by the operation timing out.",5,[[["self"]],["bool"]]],[11,"into_inner","","Returns the error yielded by the future being blocked on",6,[[["self"]],["option"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"clone","","",4,[[["self"]],["taskexecutor"]]],[11,"clone","","",3,[[["self"]],["handle"]]],[11,"from","","",5,[[["entererror"]],["self"]]],[11,"from","","",6,[[["entererror"]],["self"]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"description","","",8,[[["self"]],["str"]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"execute","","",4,[[["self"],["f"]],["result",["executeerror"]]]],[11,"spawn","","",1,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"spawn","","",4,[[["self"],["box",["future"]]],["result",["spawnerror"]]]]],"paths":[[3,"Turn"],[3,"CurrentThread"],[3,"Entered"],[3,"Handle"],[3,"TaskExecutor"],[3,"RunTimeoutError"],[3,"BlockError"],[3,"RunError"],[3,"TurnError"]]};
searchIndex["tokio_executor"]={"doc":"Task execution related traits and utilities.","items":[[3,"Enter","tokio_executor","Represents an executor context.",N,N],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",N,N],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",N,N],[3,"SpawnError","","Errors returned by `Executor::spawn`.",N,N],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",N,[[],["result",["enter","entererror"]]]],[5,"spawn","","Submits a future for execution on the default executor -- usually a threadpool.",N,[[["t"]]]],[5,"with_default","","Set the default executor for the duration of the closure",N,[[["t"],["enter"],["f"]],["r"]]],[11,"on_exit","","Register a callback to be invoked if and when the thread ceased to act as an executor.",0,[[["self"],["f"]]]],[11,"make_permanent","","Treat the remainder of execution on this thread as part of an executor; used mostly for thread pool worker threads.",0,[[["self"]]]],[11,"block_on","","Blocks the thread on the specified future, returning the value with which that future completes.",0,[[["self"],["f"]],["result"]]],[11,"current","","Returns a handle to the default executor for the current context.",1,[[],["defaultexecutor"]]],[0,"park","","Abstraction over blocking and unblocking the current thread.",N,N],[3,"ParkThread","tokio_executor::park","Blocks the current thread using a condition variable.",N,N],[3,"ParkError","","Error returned by [`ParkThread`]",N,N],[3,"UnparkThread","","Unblocks a thread that was blocked by `ParkThread`.",N,N],[8,"Park","","Block the current thread.",N,N],[16,"Unpark","","Unpark handle type for the `Park` implementation.",2,N],[16,"Error","","Error returned by `park`",2,N],[10,"unpark","","Get a new `Unpark` handle associated with this `Park` instance.",2,N],[10,"park","","Block the current thread unless or until the token is available.",2,[[["self"]],["result"]]],[10,"park_timeout","","Park the current thread for at most `duration`.",2,[[["self"],["duration"]],["result"]]],[8,"Unpark","","Unblock a thread blocked by the associated [`Park`] instance.",N,N],[10,"unpark","","Unblock a thread that is blocked by the associated `Park` handle.",3,[[["self"]]]],[11,"new","","Create a new `ParkThread` handle for the current thread.",4,[[],["parkthread"]]],[8,"Executor","tokio_executor","A value that executes futures.",N,N],[10,"spawn","","Spawns a future object to run on this executor.",5,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",5,[[["self"]],["result",["spawnerror"]]]],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",6,[[],["self"]]],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",6,[[],["self"]]],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",6,[[["self"]],["bool"]]],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",6,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","tokio_executor::park","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"unpark","","",4,N],[11,"park","","",4,[[["self"]],["result"]]],[11,"park_timeout","","",4,[[["self"],["duration"]],["result"]]],[11,"unpark","","",9,[[["self"]]]],[11,"spawn","tokio_executor","",1,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","",1,[[["self"]],["result",["spawnerror"]]]],[11,"clone","","",1,[[["self"]],["defaultexecutor"]]],[11,"clone","tokio_executor::park","",9,[[["self"]],["unparkthread"]]],[11,"drop","tokio_executor","",0,[[["self"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_executor::park","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_executor","",6,[[["self"],["formatter"]],["result"]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"execute","","",1,[[["self"],["t"]],["result",["executeerror"]]]]],"paths":[[3,"Enter"],[3,"DefaultExecutor"],[8,"Park"],[8,"Unpark"],[3,"ParkThread"],[8,"Executor"],[3,"SpawnError"],[3,"EnterError"],[3,"ParkError"],[3,"UnparkThread"]]};
searchIndex["tokio_fs"]={"doc":"Asynchronous file and standard stream adaptation.","items":[[3,"CreateDirFuture","tokio_fs","Future returned by `create_dir`.",N,N],[3,"CreateDirAllFuture","","Future returned by `create_dir_all`.",N,N],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",N,N],[3,"HardLinkFuture","","Future returned by `hard_link`.",N,N],[3,"MetadataFuture","","Future returned by `metadata`.",N,N],[3,"ReadDirFuture","","Future returned by `read_dir`.",N,N],[3,"ReadDir","","Stream of the entries in a directory.",N,N],[3,"DirEntry","","Entries returned by the [`ReadDir`] stream.",N,N],[3,"ReadLinkFuture","","Future returned by `read_link`.",N,N],[3,"RemoveDirFuture","","Future returned by `remove_dir`.",N,N],[3,"RemoveFileFuture","","Future returned by `remove_file`.",N,N],[3,"RenameFuture","","Future returned by `rename`.",N,N],[3,"SetPermissionsFuture","","Future returned by `set_permissions`.",N,N],[3,"Stdin","","A handle to the standard input stream of a process.",N,N],[3,"Stdout","","A handle to the standard output stream of a process.",N,N],[3,"Stderr","","A handle to the standard error stream of a process.",N,N],[3,"SymlinkMetadataFuture","","Future returned by `symlink_metadata`.",N,N],[5,"create_dir","","Creates a new, empty directory at the provided path",N,[[["p"]],["createdirfuture"]]],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they are missing.",N,[[["p"]],["createdirallfuture"]]],[5,"hard_link","","Creates a new hard link on the filesystem.",N,[[["p"],["q"]],["hardlinkfuture"]]],[5,"metadata","","Queries the file system metadata for a path.",N,[[["p"]],["metadatafuture"]]],[5,"read_dir","","Returns a stream over the entries within a directory.",N,[[["p"]],["readdirfuture"]]],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",N,[[["p"]],["readlinkfuture"]]],[5,"remove_dir","","Removes an existing, empty directory.",N,[[["p"]],["removedirfuture"]]],[5,"remove_file","","Removes a file from the filesystem.",N,[[["p"]],["removefilefuture"]]],[5,"rename","","Rename a file or directory to a new name, replacing the original file if `to` already exists.",N,[[["p"],["q"]],["renamefuture"]]],[5,"set_permissions","","Changes the permissions found on a file or a directory.",N,[[["p"],["permissions"]],["setpermissionsfuture"]]],[5,"stdin","","Constructs a new handle to the standard input of the current process.",N,[[],["stdin"]]],[5,"stdout","","Constructs a new handle to the standard output of the current process.",N,[[],["stdout"]]],[5,"stderr","","Constructs a new handle to the standard error of the current process.",N,[[],["stderr"]]],[5,"symlink_metadata","","Queries the file system metadata for a path.",N,[[["p"]],["symlinkmetadatafuture"]]],[0,"file","","Types for working with [`File`].",N,N],[3,"CreateFuture","tokio_fs::file","Future returned by `File::create` and resolves to a `File` instance.",N,N],[3,"MetadataFuture","","Future returned by `File::metadata` and resolves to a `(File, Metadata)` instance.",N,N],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",N,N],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",N,N],[3,"SeekFuture","","Future returned by `File::seek`.",N,N],[3,"File","","A reference to an open file on the filesystem.",N,N],[11,"new","tokio_fs","Creates a blank new set of options ready for configuration.",0,[[],["openoptions"]]],[11,"read","","See the underlying [`read`] call for details.",0,[[["self"],["bool"]],["openoptions"]]],[11,"write","","See the underlying [`write`] call for details.",0,[[["self"],["bool"]],["openoptions"]]],[11,"append","","See the underlying [`append`] call for details.",0,[[["self"],["bool"]],["openoptions"]]],[11,"truncate","","See the underlying [`truncate`] call for details.",0,[[["self"],["bool"]],["openoptions"]]],[11,"create","","See the underlying [`create`] call for details.",0,[[["self"],["bool"]],["openoptions"]]],[11,"create_new","","See the underlying [`create_new`] call for details.",0,[[["self"],["bool"]],["openoptions"]]],[11,"open","","Opens a file at `path` with the options specified by `self`.",0,[[["self"],["p"]],["openfuture"]]],[11,"open","tokio_fs::file","Attempts to open a file in read-only mode.",1,[[["p"]],["openfuture"]]],[11,"create","","Opens a file in write-only mode.",1,[[["p"]],["createfuture"]]],[11,"from_std","","Convert a [`std::fs::File`][std] to a [`tokio_fs::File`][file].",1,[[["stdfile"]],["file"]]],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",1,[[["self"],["seekfrom"]],["poll",["u64","error"]]]],[11,"seek","","Seek to an offset, in bytes, in a stream.",1,[[["self"],["seekfrom"]],["seekfuture"]]],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",1,[[["self"]],["poll",["error"]]]],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",1,[[["self"]],["poll",["error"]]]],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",1,[[["self"],["u64"]],["poll",["error"]]]],[11,"metadata","","Queries metadata about the underlying file.",1,[[["self"]],["metadatafuture"]]],[11,"poll_metadata","","Queries metadata about the underlying file.",1,[[["self"]],["poll",["metadata","error"]]]],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",1,[[["self"]],["poll",["file","error"]]]],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",1,[[["self"],["permissions"]],["poll",["error"]]]],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",1,[[["self"]],["stdfile"]]],[0,"os","tokio_fs","OS-specific functionality.",N,N],[0,"unix","tokio_fs::os","Unix-specific extensions to primitives in the `tokio_fs` module.",N,N],[3,"SymlinkFuture","tokio_fs::os::unix","Future returned by `symlink`.",N,N],[5,"symlink","","Creates a new symbolic link on the filesystem.",N,[[["p"],["q"]],["symlinkfuture"]]],[11,"into_std","tokio_fs","Destructures the `tokio_fs::DirEntry` into a [`std::fs::DirEntry`][std].",2,[[["self"]],["stddirentry"]]],[11,"path","","Returns the full path to the file that this entry represents.",2,[[["self"]],["pathbuf"]]],[11,"file_name","","Returns the bare file name of this directory entry without any other leading path component.",2,[[["self"]],["osstring"]]],[11,"poll_metadata","","Return the metadata for the file that this entry points at.",2,[[["self"]],["poll",["metadata","error"]]]],[11,"poll_file_type","","Return the file type for the file that this entry points at.",2,[[["self"]],["poll",["filetype","error"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into_future","","",3,[[["self"]],["f"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_future","","",4,[[["self"]],["f"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into_future","","",5,[[["self"]],["f"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into_future","","",6,[[["self"]],["f"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into_future","","",7,[[["self"]],["f"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into_future","","",9,[[["self"]],["f"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into_future","","",10,[[["self"]],["f"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"into_future","","",11,[[["self"]],["f"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into_future","","",12,[[["self"]],["f"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"into_future","","",13,[[["self"]],["f"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"into_future","","",17,[[["self"]],["f"]]],[11,"from","tokio_fs::file","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"into_future","","",18,[[["self"]],["f"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"into_future","","",19,[[["self"]],["f"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"into_future","","",20,[[["self"]],["f"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"into_future","","",21,[[["self"]],["f"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","tokio_fs::os::unix","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"into_future","","",22,[[["self"]],["f"]]],[11,"clone","tokio_fs","",0,[[["self"]],["openoptions"]]],[11,"from","","",0,[[["stdopenoptions"]],["openoptions"]]],[11,"drop","tokio_fs::file","",1,[[["self"]]]],[11,"fmt","tokio_fs","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_fs::file","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_fs","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_fs::file","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_fs","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_fs::os::unix","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_fs","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"write","tokio_fs::file","",1,N],[11,"flush","","",1,[[["self"]],["result"]]],[11,"write","tokio_fs","",15,N],[11,"flush","","",15,[[["self"]],["result"]]],[11,"write","","",16,N],[11,"flush","","",16,[[["self"]],["result"]]],[11,"read","tokio_fs::file","",1,N],[11,"read","tokio_fs","",14,N],[11,"ino","","",2,[[["self"]],["u64"]]],[11,"poll","","",3,[[["self"]],["poll"]]],[11,"poll","","",4,[[["self"]],["poll"]]],[11,"poll","tokio_fs::file","",18,[[["self"]],["poll"]]],[11,"poll","","",19,[[["self"]],["poll"]]],[11,"poll","","",20,[[["self"]],["poll"]]],[11,"poll","","",21,[[["self"]],["poll"]]],[11,"poll","tokio_fs","",5,[[["self"]],["poll"]]],[11,"poll","","",6,[[["self"]],["poll"]]],[11,"poll","tokio_fs::os::unix","",22,[[["self"]],["poll"]]],[11,"poll","tokio_fs","",7,[[["self"]],["poll",["error"]]]],[11,"poll","","",9,[[["self"]],["poll"]]],[11,"poll","","",10,[[["self"]],["poll"]]],[11,"poll","","",11,[[["self"]],["poll"]]],[11,"poll","","",12,[[["self"]],["poll"]]],[11,"poll","","",13,[[["self"]],["poll"]]],[11,"poll","","",17,[[["self"]],["poll"]]],[11,"poll","","",8,[[["self"]],["poll",["option"]]]],[11,"shutdown","tokio_fs::file","",1,[[["self"]],["poll",["error"]]]],[11,"shutdown","tokio_fs","",15,[[["self"]],["poll",["error"]]]],[11,"shutdown","","",16,[[["self"]],["poll",["error"]]]],[11,"prepare_uninitialized_buffer","tokio_fs::file","",1,N],[11,"prepare_uninitialized_buffer","tokio_fs","",14,N]],"paths":[[3,"OpenOptions"],[3,"File"],[3,"DirEntry"],[3,"CreateDirFuture"],[3,"CreateDirAllFuture"],[3,"HardLinkFuture"],[3,"MetadataFuture"],[3,"ReadDirFuture"],[3,"ReadDir"],[3,"ReadLinkFuture"],[3,"RemoveDirFuture"],[3,"RemoveFileFuture"],[3,"RenameFuture"],[3,"SetPermissionsFuture"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[3,"SymlinkMetadataFuture"],[3,"CreateFuture"],[3,"MetadataFuture"],[3,"OpenFuture"],[3,"SeekFuture"],[3,"SymlinkFuture"]]};
searchIndex["tokio_io"]={"doc":"Core I/O traits and combinators when working with Tokio.","items":[[0,"io","tokio_io","I/O conveniences when working with primitives in `tokio-core`",N,N],[3,"AllowStdIo","tokio_io::io","A simple wrapper type which allows types that only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",N,N],[3,"Copy","","A future which will copy all data from a reader into a writer.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",N,N],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",N,N],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",N,N],[3,"Shutdown","","A future used to fully shutdown an I/O object.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[3,"Window","","A owned window around an underlying buffer.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",N,[[["r"],["w"]],["copy"]]],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",N,[[["a"]],["flush"]]],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",N,[[["a"]],["lines"]]],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",N,[[["r"],["t"]],["read"]]],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",N,[[["a"],["t"]],["readexact"]]],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",N,[[["a"],["vec",["u8"]]],["readtoend"]]],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",N,[[["a"],["u8"],["vec",["u8"]]],["readuntil"]]],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",N,[[["a"]],["shutdown"]]],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",N,[[["a"],["t"]],["writeall"]]],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",0,[[["t"]],["self"]]],[11,"get_ref","","Returns a reference to the contained IO object.",0,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the contained IO object.",0,[[["self"]],["t"]]],[11,"into_inner","","Consumes self and returns the contained IO object.",0,[[["self"]],["t"]]],[11,"into_inner","","Returns the underlying I/O object.",1,[[["self"]],["a"]]],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",2,[[["t"]],["window"]]],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",2,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",2,[[["self"]],["t"]]],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",2,[[["self"]],["t"]]],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",2,[[["self"]],["usize"]]],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",2,[[["self"]],["usize"]]],[11,"set_start","","Changes the starting index of this window to the index specified.",2,[[["self"],["usize"]],["window"]]],[11,"set_end","","Changes the end index of this window to the index specified.",2,[[["self"],["usize"]],["window"]]],[6,"IoFuture","tokio_io","A convenience typedef around a `Future` whose error component is `io::Error`",N,N],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",N,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",3,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",3,N],[11,"read_buf","","Pull some bytes from this source into the specified `BufMut`, returning how many bytes were read.",3,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this I/O object, using `Decode` and `Encode` to read and write the raw data.",3,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",3,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",4,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",4,[[["self"]],["poll",["error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",4,[[["self"]],["poll",["error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",4,[[["self"],["b"]],["poll",["usize","error"]]]],[14,"try_nb","","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",N,N],[11,"from","tokio_io::io","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into_future","","",5,[[["self"]],["f"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into_future","","",6,[[["self"]],["f"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into_future","","",7,[[["self"]],["f"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into_future","","",8,[[["self"]],["f"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into_future","","",9,[[["self"]],["f"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into_future","","",10,[[["self"]],["f"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"into_future","","",11,[[["self"]],["f"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"into_future","","",14,[[["self"]],["f"]]],[11,"read_buf","","",12,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"shutdown","","",0,[[["self"]],["poll",["error"]]]],[11,"shutdown","","",13,[[["self"]],["poll",["error"]]]],[11,"write_buf","","",13,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"clone","","",0,[[["self"]],["allowstdio"]]],[11,"as_ref","","",2,N],[11,"partial_cmp","","",0,[[["self"],["allowstdio"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["allowstdio"]],["bool"]]],[11,"le","","",0,[[["self"],["allowstdio"]],["bool"]]],[11,"gt","","",0,[[["self"],["allowstdio"]],["bool"]]],[11,"ge","","",0,[[["self"],["allowstdio"]],["bool"]]],[11,"as_mut","","",2,N],[11,"eq","","",0,[[["self"],["allowstdio"]],["bool"]]],[11,"ne","","",0,[[["self"],["allowstdio"]],["bool"]]],[11,"cmp","","",0,[[["self"],["allowstdio"]],["ordering"]]],[11,"hash","","",0,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"write","","",0,N],[11,"flush","","",0,[[["self"]],["result"]]],[11,"write_all","","",0,N],[11,"write_fmt","","",0,[[["self"],["arguments"]],["result"]]],[11,"write","","",13,N],[11,"flush","","",13,[[["self"]],["result"]]],[11,"read","","",0,N],[11,"read_to_end","","",0,[[["self"],["vec"]],["result",["usize"]]]],[11,"read_to_string","","",0,[[["self"],["string"]],["result",["usize"]]]],[11,"read_exact","","",0,N],[11,"read","","",12,N],[11,"poll","","",5,[[["self"]],["poll",["error"]]]],[11,"poll","","",6,[[["self"]],["poll",["error"]]]],[11,"poll","","",7,[[["self"]],["poll",["error"]]]],[11,"poll","","",8,[[["self"]],["poll",["error"]]]],[11,"poll","","",9,[[["self"]],["poll",["error"]]]],[11,"poll","","",10,[[["self"]],["poll",["error"]]]],[11,"poll","","",11,[[["self"]],["poll",["error"]]]],[11,"poll","","",14,[[["self"]],["poll",["error"]]]],[11,"poll","","",1,[[["self"]],["poll",["option","error"]]]],[11,"prepare_uninitialized_buffer","tokio_io","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",3,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",3,N],[11,"read_buf","","Pull some bytes from this source into the specified `BufMut`, returning how many bytes were read.",3,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this I/O object, using `Decode` and `Encode` to read and write the raw data.",3,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",3,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",4,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",4,[[["self"]],["poll",["error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",4,[[["self"],["b"]],["poll",["usize","error"]]]]],"paths":[[3,"AllowStdIo"],[3,"Lines"],[3,"Window"],[8,"AsyncRead"],[8,"AsyncWrite"],[3,"Copy"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"Shutdown"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"WriteAll"]]};
searchIndex["tokio_reactor"]={"doc":"Event loop that drives Tokio I/O resources.","items":[[3,"Background","tokio_reactor","Handle to the reactor running on a background thread.",N,N],[3,"Shutdown","","Future that resolves when the reactor thread has shutdown.",N,N],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",N,N],[3,"PollEvented","","Associates an I/O resource that implements the [`std::io::Read`] and/or [`std::io::Write`] traits with the reactor that drives it.",N,N],[3,"Reactor","","The core reactor, or event loop.",N,N],[3,"Handle","","A reference to a reactor.",N,N],[3,"Turn","","Return value from the `turn` method on `Reactor`.",N,N],[3,"SetFallbackError","","Error returned from `Handle::set_fallback`.",N,N],[5,"with_default","","Set the default reactor for the duration of the closure",N,[[["handle"],["enter"],["f"]],["r"]]],[11,"handle","","Returns a reference to the reactor handle.",0,[[["self"]],["handle"]]],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",0,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the reactor immediately",0,[[["self"]],["shutdown"]]],[11,"forget","","Run the reactor on its thread until the process terminates.",0,[[["self"]]]],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",1,[[["e"]],["pollevented"]]],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",1,[[["e"],["handle"]],["result"]]],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",1,[[["self"]],["e"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",1,[[["self"]],["e"]]],[11,"into_inner","","Consumes self, returning the inner I/O object",1,[[["self"]],["result"]]],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",1,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",1,[[["self"],["ready"]],["result"]]],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",1,[[["self"]],["poll",["ready","error"]]]],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",1,[[["self"]],["result"]]],[11,"new","","Create a new `Registration`.",2,[[],["registration"]]],[11,"register","","Register the I/O resource with the default reactor.",2,[[["self"],["t"]],["result",["bool"]]]],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",2,[[["self"],["t"]],["result"]]],[11,"register_with","","Register the I/O resource with the specified reactor.",2,[[["self"],["t"],["handle"]],["result",["bool"]]]],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",2,[[["self"]],["poll",["ready","error"]]]],[11,"take_read_ready","","Consume any pending read readiness event.",2,[[["self"]],["result",["option"]]]],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",2,[[["self"]],["poll",["ready","error"]]]],[11,"take_write_ready","","Consume any pending write readiness event.",2,[[["self"]],["result",["option"]]]],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",3,[[],["result",["reactor"]]]],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",3,[[["self"]],["handle"]]],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",3,[[["self"]],["result",["setfallbackerror"]]]],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",3,[[["self"],["option",["duration"]]],["result",["turn"]]]],[11,"is_idle","","Returns true if the reactor is currently idle.",3,[[["self"]],["bool"]]],[11,"background","","Run this reactor on a background thread.",3,[[["self"]],["result",["background"]]]],[11,"current","","Returns a handle to the current reactor.",4,[[],["handle"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into_future","","",5,[[["self"]],["f"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"clone","","",4,[[["self"]],["handle"]]],[11,"clone","","",7,[[["self"]],["setfallbackerror"]]],[11,"drop","","",0,[[["self"]]]],[11,"drop","","",1,[[["self"]]]],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",4,[[],["handle"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"write","","",1,N],[11,"flush","","",1,[[["self"]],["result"]]],[11,"read","","",1,N],[11,"description","","",7,[[["self"]],["str"]]],[11,"poll","","",5,[[["self"]],["poll"]]],[11,"unpark","","",3,N],[11,"park","","",3,[[["self"]],["result"]]],[11,"park_timeout","","",3,[[["self"],["duration"]],["result"]]],[11,"unpark","","",4,[[["self"]]]],[11,"shutdown","","",1,[[["self"]],["poll",["error"]]]]],"paths":[[3,"Background"],[3,"PollEvented"],[3,"Registration"],[3,"Reactor"],[3,"Handle"],[3,"Shutdown"],[3,"Turn"],[3,"SetFallbackError"]]};
searchIndex["tokio_signal"]={"doc":"Asynchronous signal handling for Tokio","items":[[5,"ctrl_c","tokio_signal","Creates a stream which receives \"ctrl-c\" notifications sent to a process.",N,[[],["iofuture",["iostream"]]]],[5,"ctrl_c_handle","","Creates a stream which receives \"ctrl-c\" notifications sent to a process.",N,[[["handle"]],["iofuture",["iostream"]]]],[0,"unix","","Unix-specific types for signal handling.",N,N],[17,"SIGUSR1","tokio_signal::unix","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGTERM","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGTRAP","","",N,N],[3,"Signal","","An implementation of `Stream` for receiving a particular type of signal.",N,N],[11,"new","","Creates a new stream which will receive notifications when the current process receives the signal `signal`.",0,[[["c_int"]],["iofuture",["signal"]]]],[11,"with_handle","","Creates a new stream which will receive notifications when the current process receives the signal `signal`.",0,[[["c_int"],["handle"]],["iofuture",["signal"]]]],[6,"IoFuture","tokio_signal","A future whose error is `io::Error`",N,N],[6,"IoStream","","A stream whose error is `io::Error`",N,N],[11,"from","tokio_signal::unix","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"drop","","",0,[[["self"]]]],[11,"poll","","",0,[[["self"]],["poll",["option","error"]]]]],"paths":[[3,"Signal"]]};
searchIndex["tokio_tcp"]={"doc":"TCP bindings for `tokio`.","items":[[3,"Incoming","tokio_tcp","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",N,N],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",N,N],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",N,N],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",N,N],[11,"bind","","Create a new TCP listener associated with this event loop.",0,[[["socketaddr"]],["result",["tcplistener"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",0,[[["self"]],["poll",["error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",0,[[["self"]],["poll",["error"]]]],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",0,[[["tcplistener"],["handle"]],["result",["tcplistener"]]]],[11,"local_addr","","Returns the local address that this listener is bound to.",0,[[["self"]],["result",["socketaddr"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",0,[[["self"]],["incoming"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",0,[[["self"]],["result",["u32"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",0,[[["self"],["u32"]],["result"]]],[11,"connect","","Create a new TCP stream connected to the specified address.",1,[[["socketaddr"]],["connectfuture"]]],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",1,[[["tcpstream"],["handle"]],["result",["tcpstream"]]]],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",1,[[["tcpstream"],["socketaddr"],["handle"]],["connectfuture"]]],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",1,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",1,[[["self"]],["poll",["ready","error"]]]],[11,"local_addr","","Returns the local address that this stream is bound to.",1,[[["self"]],["result",["socketaddr"]]]],[11,"peer_addr","","Returns the remote address that this stream is connected to. # Examples",1,[[["self"]],["result",["socketaddr"]]]],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",1,N],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",1,[[["self"],["shutdown"]],["result"]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",1,[[["self"]],["result",["bool"]]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",1,[[["self"]],["result",["usize"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",1,[[["self"],["usize"]],["result"]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",1,[[["self"]],["result",["usize"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",1,[[["self"],["usize"]],["result"]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",1,[[["self"]],["result",["option"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",1,[[["self"],["option",["duration"]]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,[[["self"]],["result",["u32"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,[[["self"],["u32"]],["result"]]],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",1,[[["self"]],["result",["option"]]]],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",1,[[["self"],["option",["duration"]]],["result"]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",1,[[["self"]],["result",["tcpstream"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into_future","","",3,[[["self"]],["f"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"write","","",1,N],[11,"flush","","",1,[[["self"]],["result"]]],[11,"read","","",1,N],[11,"as_raw_fd","","",0,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",1,[[["self"]],["rawfd"]]],[11,"poll","","",3,[[["self"]],["poll",["tcpstream","error"]]]],[11,"poll","","",2,[[["self"]],["poll",["option","error"]]]],[11,"shutdown","","",1,[[["self"]],["poll",["error"]]]],[11,"write_buf","","",1,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"prepare_uninitialized_buffer","","",1,N],[11,"read_buf","","",1,[[["self"],["b"]],["poll",["usize","error"]]]]],"paths":[[3,"TcpListener"],[3,"TcpStream"],[3,"Incoming"],[3,"ConnectFuture"]]};
searchIndex["tokio_threadpool"]={"doc":"A work-stealing based thread pool for executing futures.","items":[[3,"BlockingError","tokio_threadpool","Error raised by `blocking`.",N,N],[3,"Builder","","Builds a thread pool with custom configuration values.",N,N],[3,"Sender","","Submit futures to the associated thread pool for execution.",N,N],[3,"Shutdown","","Future that resolves when the thread pool is shutdown.",N,N],[3,"ThreadPool","","Work-stealing based thread pool for executing futures.",N,N],[3,"SpawnHandle","","Handle returned from ThreadPool::spawn_handle.",N,N],[3,"Worker","","Thread worker",N,N],[3,"WorkerId","","Identifies a thread pool worker.",N,N],[5,"blocking","","Enter a blocking section of code.",N,[[["f"]],["poll",["blockingerror"]]]],[0,"park","","Thread parking utilities.",N,N],[3,"DefaultPark","tokio_threadpool::park","Parks the thread.",N,N],[3,"DefaultUnpark","","Unparks threads that were parked by `DefaultPark`.",N,N],[3,"ParkError","","Error returned by [`ParkThread`]",N,N],[11,"new","","Creates a new `DefaultPark` instance.",0,[[],["defaultpark"]]],[11,"new","tokio_threadpool","Returns a new thread pool builder initialized with default configuration values.",1,[[],["builder"]]],[11,"pool_size","","Set the maximum number of worker threads for the thread pool instance.",1,[[["self"],["usize"]],["self"]]],[11,"max_blocking","","Set the maximum number of concurrent blocking sections.",1,[[["self"],["usize"]],["self"]]],[11,"keep_alive","","Set the thread keep alive duration",1,[[["self"],["option",["duration"]]],["self"]]],[11,"name_prefix","","Set name prefix of threads spawned by the scheduler",1,[[["self"],["s"]],["self"]]],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",1,[[["self"],["usize"]],["self"]]],[11,"around_worker","","Execute function `f` on each worker thread.",1,[[["self"],["f"]],["self"]]],[11,"after_start","","Execute function `f` after each thread is started but before it starts doing work.",1,[[["self"],["f"]],["self"]]],[11,"before_stop","","Execute function `f` before each thread stops.",1,[[["self"],["f"]],["self"]]],[11,"custom_park","","Customize the `park` instance used by each worker thread.",1,[[["self"],["f"]],["self"]]],[11,"build","","Create the configured `ThreadPool`.",1,[[["self"]],["threadpool"]]],[11,"spawn","","Spawn a future onto the thread pool",2,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"new","","Create a new `ThreadPool` with default values.",3,[[],["threadpool"]]],[11,"spawn","","Spawn a future onto the thread pool.",3,[[["self"],["f"]]]],[11,"spawn_handle","","Spawn a future on to the thread pool, return a future representing  the produced value.",3,[[["self"],["f"]],["spawnhandle"]]],[11,"sender","","Return a reference to the sender handle",3,[[["self"]],["sender"]]],[11,"sender_mut","","Return a mutable reference to the sender handle",3,[[["self"]],["sender"]]],[11,"shutdown_on_idle","","Shutdown the pool once it becomes idle.",3,[[["self"]],["shutdown"]]],[11,"shutdown","","Shutdown the pool",3,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the pool immediately",3,[[["self"]],["shutdown"]]],[11,"id","","Returns a reference to the worker's identifier.",4,[[["self"]],["workerid"]]],[11,"run","","Run the worker",4,[[["self"]]]],[11,"to_usize","","Returns this identifier represented as an integer.",5,[[["self"]],["usize"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into_future","","",7,[[["self"]],["f"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into_future","","",8,[[["self"]],["f"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","tokio_threadpool::park","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"clone","tokio_threadpool","",2,[[["self"]],["sender"]]],[11,"clone","","",5,[[["self"]],["workerid"]]],[11,"drop","","",3,[[["self"]]]],[11,"drop","","",4,[[["self"]]]],[11,"eq","","",5,[[["self"],["workerid"]],["bool"]]],[11,"ne","","",5,[[["self"],["workerid"]],["bool"]]],[11,"hash","","",5,N],[11,"fmt","tokio_threadpool::park","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_threadpool","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_threadpool::park","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_threadpool","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","tokio_threadpool::park","",10,[[["self"]],["str"]]],[11,"description","tokio_threadpool","",6,[[["self"]],["str"]]],[11,"poll","","",7,[[["self"]],["poll"]]],[11,"poll","","",8,[[["self"]],["poll"]]],[11,"execute","","",2,[[["self"],["t"]],["result",["executeerror"]]]],[11,"status","","",2,[[["self"]],["result",["spawnerror"]]]],[11,"spawn","","",2,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"unpark","tokio_threadpool::park","",0,N],[11,"park","","",0,[[["self"]],["result"]]],[11,"park_timeout","","",0,[[["self"],["duration"]],["result"]]],[11,"unpark","","",9,[[["self"]]]]],"paths":[[3,"DefaultPark"],[3,"Builder"],[3,"Sender"],[3,"ThreadPool"],[3,"Worker"],[3,"WorkerId"],[3,"BlockingError"],[3,"Shutdown"],[3,"SpawnHandle"],[3,"DefaultUnpark"],[3,"ParkError"]]};
searchIndex["tokio_timer"]={"doc":"Utilities for tracking time.","items":[[3,"DelayQueue","tokio_timer","A queue of delayed elements.",N,N],[3,"Delay","","A future that completes at a specified instant in time.",N,N],[3,"Error","","Errors encountered by the timer implementation.",N,N],[3,"Interval","","A stream representing notifications at fixed interval",N,N],[3,"Timeout","","Allows a `Future` or `Stream` to execute for a limited amount of time.",N,N],[5,"with_default","","Set the default timer for the duration of the closure.",N,[[["handle"],["enter"],["f"]],["r"]]],[5,"sleep","","Create a Future that completes in `duration` from now.",N,[[["duration"]],["delay"]]],[0,"clock","","A configurable source of time.",N,N],[3,"Clock","tokio_timer::clock","A handle to a source of time.",N,N],[5,"now","","Returns an `Instant` corresponding to \"now\".",N,[[],["instant"]]],[5,"with_default","","Set the default clock for the duration of the closure.",N,[[["clock"],["enter"],["f"]],["r"]]],[11,"new","","Return a new `Clock` instance that uses the current execution context's source of time.",0,[[],["clock"]]],[11,"new_with_now","","Return a new `Clock` instance that uses `now` as the source of time.",0,[[["t"]],["clock"]]],[11,"system","","Return a new `Clock` instance that uses `Instant::now()` as the source of time.",0,[[],["clock"]]],[11,"now","","Returns an instant corresponding to \"now\" by using the instance's source of time.",0,[[["self"]],["instant"]]],[8,"Now","","Returns `Instant` values representing the current instant in time.",N,N],[10,"now","","Returns an instant corresponding to \"now\".",1,[[["self"]],["instant"]]],[0,"delay_queue","tokio_timer","A queue of delayed elements.",N,N],[3,"DelayQueue","tokio_timer::delay_queue","A queue of delayed elements.",N,N],[3,"Expired","","An entry in `DelayQueue` that has expired and removed.",N,N],[3,"Key","","Token to a value stored in a `DelayQueue`.",N,N],[11,"new","","Create a new, empty, `DelayQueue`",2,[[],["delayqueue"]]],[11,"with_capacity_and_handle","","Create a new, empty, `DelayQueue` backed by the specified timer.",2,[[["usize"],["handle"]],["delayqueue"]]],[11,"with_capacity","","Create a new, empty, `DelayQueue` with the specified capacity.",2,[[["usize"]],["delayqueue"]]],[11,"insert_at","","Insert `value` into the queue set to expire at a specific instant in time.",2,[[["self"],["t"],["instant"]],["key"]]],[11,"insert","","Insert `value` into the queue set to expire after the requested duration elapses.",2,[[["self"],["t"],["duration"]],["key"]]],[11,"remove","","Remove the item associated with `key` from the queue.",2,[[["self"],["key"]],["expired"]]],[11,"reset_at","","Sets the delay of the item associated with `key` to expire at `when`.",2,[[["self"],["key"],["instant"]]]],[11,"reset","","Sets the delay of the item associated with `key` to expire after `timeout`.",2,[[["self"],["key"],["duration"]]]],[11,"clear","","Clears the queue, removing all items.",2,[[["self"]]]],[11,"capacity","","Returns the number of elements the queue can hold without reallocating.",2,[[["self"]],["usize"]]],[11,"reserve","","Reserve capacity for at least `additional` more items to be queued without allocating.",2,[[["self"],["usize"]]]],[11,"is_empty","","Returns `true` if there are no items in the queue.",2,[[["self"]],["bool"]]],[11,"get_ref","","Returns a reference to the inner value.",3,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the inner value.",3,[[["self"]],["t"]]],[11,"into_inner","","Consumes `self` and returns the inner value.",3,[[["self"]],["t"]]],[0,"throttle","tokio_timer","Slow down a stream by enforcing a delay between items.",N,N],[3,"Throttle","tokio_timer::throttle","Slow down a stream by enforcing a delay between items.",N,N],[3,"ThrottleError","","Either the error of the underlying stream, or an error within tokio's timing machinery.",N,N],[11,"new","","Slow down a stream by enforcing a delay between items.",4,[[["t"],["duration"]],["self"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",4,[[["self"]],["t"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",4,[[["self"]],["t"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",4,[[["self"]],["t"]]],[11,"from_stream_err","","Creates a new `ThrottleError` from the given stream error.",5,[[["t"]],["self"]]],[11,"from_timer_err","","Creates a new `ThrottleError` from the given tokio timer error.",5,[[["error"]],["self"]]],[11,"get_stream_error","","Attempts to get the underlying stream error, if it is present.",5,[[["self"]],["option"]]],[11,"get_timer_error","","Attempts to get the underlying timer error, if it is present.",5,[[["self"]],["option",["error"]]]],[11,"into_stream_error","","Attempts to extract the underlying stream error, if it is present.",5,[[["self"]],["option"]]],[11,"into_timer_error","","Attempts to extract the underlying timer error, if it is present.",5,[[["self"]],["option",["error"]]]],[11,"is_stream_error","","Returns whether the throttle error has occured because of an error in the underlying stream.",5,[[["self"]],["bool"]]],[11,"is_timer_error","","Returns whether the throttle error has occured because of an error in tokio's timer system.",5,[[["self"]],["bool"]]],[0,"timeout","tokio_timer","Allows a future or stream to execute for a maximum amount of time.",N,N],[3,"Timeout","tokio_timer::timeout","Allows a `Future` or `Stream` to execute for a limited amount of time.",N,N],[3,"Error","","Error returned by `Timeout`.",N,N],[11,"new","","Create a new `Timeout` that allows `value` to execute for a duration of at most `timeout`.",6,[[["t"],["duration"]],["timeout"]]],[11,"get_ref","","Gets a reference to the underlying value in this timeout.",6,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying value in this timeout.",6,[[["self"]],["t"]]],[11,"into_inner","","Consumes this timeout, returning the underlying value.",6,[[["self"]],["t"]]],[11,"new_at","","Create a new `Timeout` that completes when `future` completes or when `deadline` is reached.",6,[[["t"],["instant"]],["timeout"]]],[11,"inner","","Create a new `Error` representing the inner value completing with `Err`.",7,[[["t"]],["error"]]],[11,"is_inner","","Returns `true` if the error was caused by the inner value completing with `Err`.",7,[[["self"]],["bool"]]],[11,"into_inner","","Consumes `self`, returning the inner future error.",7,[[["self"]],["option"]]],[11,"elapsed","","Create a new `Error` representing the inner value not completing before the deadline is reached.",7,[[],["error"]]],[11,"is_elapsed","","Returns `true` if the error was caused by the inner value not completing before the deadline is reached.",7,[[["self"]],["bool"]]],[11,"timer","","Creates a new `Error` representing an error encountered by the timer implementation",7,[[["error"]],["error"]]],[11,"is_timer","","Returns `true` if the error was caused by the timer.",7,[[["self"]],["bool"]]],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",7,[[["self"]],["option",["error"]]]],[0,"timer","tokio_timer","Timer implementation.",N,N],[3,"Handle","tokio_timer::timer","Handle to timer instance.",N,N],[3,"SystemNow","","A handle to a source of time.",N,N],[3,"Timer","","Timer implementation that drives [`Delay`], [`Interval`], and [`Deadline`].",N,N],[3,"Turn","","Return value from the `turn` method on `Timer`.",N,N],[5,"with_default","","Set the default timer for the duration of the closure.",N,[[["handle"],["enter"],["f"]],["r"]]],[11,"current","","Returns a handle to the current timer.",8,[[],["handle"]]],[11,"delay","","Create a `Delay` driven by this handle's associated `Timer`.",8,[[["self"],["instant"]],["delay"]]],[11,"deadline","","Create a `Deadline` driven by this handle's associated `Timer`.",8,[[["self"],["t"],["instant"]],["deadline"]]],[11,"interval","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",8,[[["self"],["instant"],["duration"]],["interval"]]],[11,"new","","Create a new `Timer` instance that uses `park` to block the current thread.",9,[[["t"]],["self"]]],[11,"get_park","","Returns a reference to the underlying `Park` instance.",9,[[["self"]],["t"]]],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",9,[[["self"]],["t"]]],[11,"new_with_now","","Create a new `Timer` instance that uses `park` to block the current thread and `now` to get the current `Instant`.",9,[[["t"],["n"]],["self"]]],[11,"handle","","Returns a handle to the timer.",9,[[["self"]],["handle"]]],[11,"turn","","Performs one iteration of the timer loop.",9,[[["self"],["option",["duration"]]],["result",["turn"]]]],[11,"new","tokio_timer","Create a new `Delay` instance that elapses at `deadline`.",10,[[["instant"]],["delay"]]],[11,"deadline","","Returns the instant at which the future will complete.",10,[[["self"]],["instant"]]],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",10,[[["self"]],["bool"]]],[11,"reset","","Reset the `Delay` instance to a new deadline.",10,[[["self"],["instant"]]]],[11,"shutdown","","Create an error representing a shutdown timer.",11,[[],["error"]]],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",11,[[["self"]],["bool"]]],[11,"at_capacity","","Create an error representing a timer at capacity.",11,[[],["error"]]],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",11,[[["self"]],["bool"]]],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",12,[[["instant"],["duration"]],["interval"]]],[11,"new_interval","","Creates new `Interval` that yields with interval of `duration`.",12,[[["duration"]],["interval"]]],[11,"from","tokio_timer::delay_queue","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","tokio_timer","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into_future","","",10,[[["self"]],["f"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","tokio_timer::timeout","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into_future","","",6,[[["self"]],["f"]]],[11,"from","tokio_timer::clock","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","tokio_timer::delay_queue","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","tokio_timer::throttle","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","tokio_timer::timeout","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","tokio_timer::timer","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"clone","tokio_timer::clock","",0,[[["self"]],["clock"]]],[11,"clone","tokio_timer::delay_queue","",13,[[["self"]],["key"]]],[11,"clone","tokio_timer::timer","",8,[[["self"]],["handle"]]],[11,"drop","","",9,[[["self"]]]],[11,"default","tokio_timer::clock","",0,[[],["clock"]]],[11,"default","tokio_timer::timer","",8,[[],["handle"]]],[11,"default","","",9,[[],["self"]]],[11,"fmt","tokio_timer::throttle","",5,[[["self"],["formatter"]],["fmtresult"]]],[11,"fmt","tokio_timer::timeout","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_timer","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_timer::clock","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_timer::delay_queue","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_timer::throttle","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_timer::timeout","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_timer::timer","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","tokio_timer","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"description","tokio_timer::throttle","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["stderror"]]]],[11,"description","tokio_timer::timeout","",7,[[["self"]],["str"]]],[11,"description","tokio_timer","",11,[[["self"]],["str"]]],[11,"poll","tokio_timer::timeout","",6,[[["self"]],["poll"]]],[11,"poll","tokio_timer","",10,[[["self"]],["poll"]]],[11,"poll","tokio_timer::delay_queue","",2,[[["self"]],["poll",["option","error"]]]],[11,"poll","tokio_timer::throttle","",4,[[["self"]],["poll",["option"]]]],[11,"poll","tokio_timer::timeout","",6,[[["self"]],["poll",["option"]]]],[11,"poll","tokio_timer","",12,[[["self"]],["poll",["option"]]]],[11,"unpark","tokio_timer::timer","",9,N],[11,"park","","",9,[[["self"]],["result"]]],[11,"park_timeout","","",9,[[["self"],["duration"]],["result"]]]],"paths":[[3,"Clock"],[8,"Now"],[3,"DelayQueue"],[3,"Expired"],[3,"Throttle"],[3,"ThrottleError"],[3,"Timeout"],[3,"Error"],[3,"Handle"],[3,"Timer"],[3,"Delay"],[3,"Error"],[3,"Interval"],[3,"Key"],[3,"Turn"]]};
searchIndex["tokio_tls"]={"doc":"Async TLS streams","items":[[3,"TlsStream","tokio_tls","A wrapper around an underlying raw stream which implements the TLS or SSL protocol.",N,N],[3,"TlsConnector","","A wrapper around a `native_tls::TlsConnector`, providing an async `connect` method.",N,N],[3,"TlsAcceptor","","A wrapper around a `native_tls::TlsAcceptor`, providing an async `accept` method.",N,N],[3,"Connect","","Future returned from `TlsConnector::connect` which will resolve once the connection handshake has finished.",N,N],[3,"Accept","","Future returned from `TlsAcceptor::accept` which will resolve once the accept handshake has finished.",N,N],[11,"get_ref","","Get access to the internal `native_tls::TlsStream` stream which also transitively allows access to `S`.",0,[[["self"]],["tlsstream"]]],[11,"get_mut","","Get mutable access to the internal `native_tls::TlsStream` stream which also transitively allows mutable access to `S`.",0,[[["self"]],["tlsstream"]]],[11,"connect","","Connects the provided stream with this connector, assuming the provided domain.",1,[[["self"],["str"],["s"]],["connect"]]],[11,"accept","","Accepts a new client connection with the provided stream.",2,[[["self"],["s"]],["accept"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into_future","","",3,[[["self"]],["f"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_future","","",4,[[["self"]],["f"]]],[11,"clone","","",1,[[["self"]],["tlsconnector"]]],[11,"clone","","",2,[[["self"]],["tlsacceptor"]]],[11,"from","","",1,[[["tlsconnector"]],["tlsconnector"]]],[11,"from","","",2,[[["tlsacceptor"]],["tlsacceptor"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"write","","",0,N],[11,"flush","","",0,[[["self"]],["result"]]],[11,"read","","",0,N],[11,"poll","","",3,[[["self"]],["poll",["tlsstream","error"]]]],[11,"poll","","",4,[[["self"]],["poll",["tlsstream","error"]]]],[11,"shutdown","","",0,[[["self"]],["poll",["error"]]]]],"paths":[[3,"TlsStream"],[3,"TlsConnector"],[3,"TlsAcceptor"],[3,"Connect"],[3,"Accept"]]};
searchIndex["tokio_udp"]={"doc":"UDP bindings for `tokio`.","items":[[3,"UdpFramed","tokio_udp","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"UdpSocket","","An I/O object representing a UDP socket.",N,N],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",N,N],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",N,N],[11,"new","","Create a new `UdpFramed` backed by the given socket and codec.",0,[[["udpsocket"],["c"]],["udpframed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",0,[[["self"]],["udpsocket"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",0,[[["self"]],["udpsocket"]]],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",0,[[["self"]],["udpsocket"]]],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",1,[[["socketaddr"]],["result",["udpsocket"]]]],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",1,[[["udpsocket"],["handle"]],["result",["udpsocket"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",1,[[["self"]],["result",["socketaddr"]]]],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",1,[[["self"],["socketaddr"]],["result"]]],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",1,N],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",1,N],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",1,N],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",1,[[["self"],["t"],["socketaddr"]],["senddgram"]]],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",1,N],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",1,[[["self"],["t"]],["recvdgram"]]],[11,"poll_read_ready","","Check the UDP socket's read readiness state.",1,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"poll_write_ready","","Check the UDP socket's write readiness state.",1,[[["self"]],["poll",["ready","error"]]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",1,[[["self"]],["result",["bool"]]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",1,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,[[["self"]],["result",["bool"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,[[["self"],["bool"]],["result"]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",1,[[["self"]],["result",["u32"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",1,[[["self"],["u32"]],["result"]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,[[["self"]],["result",["bool"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,[[["self"],["bool"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,[[["self"]],["result",["u32"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,[[["self"],["u32"]],["result"]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",1,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",1,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",1,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",1,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"into_parts","","Consume the `RecvDgram`, returning the socket and buffer.",2,[[["self"]],["parts"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into_future","","",3,[[["self"]],["f"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_future","","",2,[[["self"]],["f"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"as_raw_fd","","",1,[[["self"]],["rawfd"]]],[11,"poll","","",3,[[["self"]],["poll",["error"]]]],[11,"poll","","",2,[[["self"]],["poll",["error"]]]],[11,"poll","","",0,[[["self"]],["poll",["option"]]]],[11,"start_send","","",0,N],[11,"poll_complete","","",0,[[["self"]],["poll"]]],[11,"close","","",0,[[["self"]],["poll"]]]],"paths":[[3,"UdpFramed"],[3,"UdpSocket"],[3,"RecvDgram"],[3,"SendDgram"]]};
searchIndex["tokio_uds"]={"doc":"Unix Domain Sockets for Tokio.","items":[[3,"UnixDatagram","tokio_uds","An I/O object representing a Unix datagram socket.",N,N],[3,"UnixDatagramFramed","","A unified `Stream` and `Sink` interface to an underlying `UnixDatagram`, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"Incoming","","Stream of listeners",N,N],[3,"UnixListener","","A Unix socket which can accept connections from other Unix sockets.",N,N],[3,"RecvDgram","","A future for receiving datagrams from a Unix datagram socket.",N,N],[3,"SendDgram","","A future for writing a buffer to a Unix datagram socket.",N,N],[3,"UnixStream","","A structure representing a connected Unix socket.",N,N],[3,"ConnectFuture","","Future returned by `UnixStream::connect` which will resolve to a `UnixStream` when the stream is connected.",N,N],[3,"UCred","","Credentials of a process",N,N],[12,"uid","","UID (user ID) of the process",0,N],[12,"gid","","GID (group ID) of the process",0,N],[11,"bind","","Creates a new `UnixDatagram` bound to the specified path.",1,[[["p"]],["result",["unixdatagram"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",1,[[],["result"]]],[11,"from_std","","Consumes a `UnixDatagram` in the standard library and returns a nonblocking `UnixDatagram` from this crate.",1,[[["unixdatagram"],["handle"]],["result",["unixdatagram"]]]],[11,"unbound","","Creates a new `UnixDatagram` which is not bound to any address.",1,[[],["result",["unixdatagram"]]]],[11,"connect","","Connects the socket to the specified address.",1,[[["self"],["p"]],["result"]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",1,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",1,[[["self"]],["poll",["ready","error"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",1,[[["self"]],["result",["socketaddr"]]]],[11,"peer_addr","","Returns the address of this socket's peer.",1,[[["self"]],["result",["socketaddr"]]]],[11,"poll_recv_from","","Receives data from the socket.",1,N],[11,"poll_recv","","Receives data from the socket.",1,N],[11,"recv_dgram","","Returns a future for receiving a datagram. See the documentation on RecvDgram for details.",1,[[["self"],["t"]],["recvdgram"]]],[11,"poll_send_to","","Sends data on the socket to the specified address.",1,N],[11,"poll_send","","Sends data on the socket to the socket's peer.",1,N],[11,"send_dgram","","Returns a future sending the data in buf to the socket at path.",1,[[["self"],["t"],["p"]],["senddgram"]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",1,[[["self"]],["result",["option"]]]],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",1,[[["self"],["shutdown"]],["result"]]],[11,"new","","Create a new `UnixDatagramFramed` backed by the given socket and codec.",2,[[["unixdatagram"],["c"]],["unixdatagramframed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",2,[[["self"]],["unixdatagram"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",2,[[["self"]],["unixdatagram"]]],[11,"bind","","Creates a new `UnixListener` bound to the specified path.",3,[[["p"]],["result",["unixlistener"]]]],[11,"from_std","","Consumes a `UnixListener` in the standard library and returns a nonblocking `UnixListener` from this crate.",3,[[["unixlistener"],["handle"]],["result",["unixlistener"]]]],[11,"local_addr","","Returns the local socket address of this listener.",3,[[["self"]],["result",["socketaddr"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",3,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",3,[[["self"]],["result",["option"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",3,[[["self"]],["poll",["error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",3,[[["self"]],["poll",["error"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",3,[[["self"]],["incoming"]]],[11,"connect","","Connects to the socket named by `path`.",4,[[["p"]],["connectfuture"]]],[11,"from_std","","Consumes a `UnixStream` in the standard library and returns a nonblocking `UnixStream` from this crate.",4,[[["unixstream"],["handle"]],["result",["unixstream"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",4,[[],["result"]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",4,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",4,[[["self"]],["poll",["ready","error"]]]],[11,"local_addr","","Returns the socket address of the local half of this connection.",4,[[["self"]],["result",["socketaddr"]]]],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",4,[[["self"]],["result",["socketaddr"]]]],[11,"peer_cred","","Returns effective credentials of the process which called `connect` or `pair`.",4,[[["self"]],["result",["ucred"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",4,[[["self"]],["result",["option"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",4,[[["self"],["shutdown"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into_future","","",6,[[["self"]],["f"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into_future","","",7,[[["self"]],["f"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into_future","","",8,[[["self"]],["f"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["ucred"]]],[11,"eq","","",0,[[["self"],["ucred"]],["bool"]]],[11,"ne","","",0,[[["self"],["ucred"]],["bool"]]],[11,"hash","","",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"write","","",4,N],[11,"flush","","",4,[[["self"]],["result"]]],[11,"read","","",4,N],[11,"as_raw_fd","","",1,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",3,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",4,[[["self"]],["rawfd"]]],[11,"poll","","",6,[[["self"]],["poll"]]],[11,"poll","","",7,[[["self"]],["poll"]]],[11,"poll","","",8,[[["self"]],["poll",["unixstream","error"]]]],[11,"poll","","",2,[[["self"]],["poll",["option"]]]],[11,"poll","","",5,[[["self"]],["poll",["option","error"]]]],[11,"start_send","","",2,N],[11,"poll_complete","","",2,[[["self"]],["poll"]]],[11,"close","","",2,[[["self"]],["poll"]]],[11,"shutdown","","",4,[[["self"]],["poll",["error"]]]],[11,"write_buf","","",4,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"prepare_uninitialized_buffer","","",4,N],[11,"read_buf","","",4,[[["self"],["b"]],["poll",["usize","error"]]]]],"paths":[[3,"UCred"],[3,"UnixDatagram"],[3,"UnixDatagramFramed"],[3,"UnixListener"],[3,"UnixStream"],[3,"Incoming"],[3,"RecvDgram"],[3,"SendDgram"],[3,"ConnectFuture"]]};
initSearch(searchIndex);
